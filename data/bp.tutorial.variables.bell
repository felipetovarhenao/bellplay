#( 
    --------------------------------
    VARIABLE DECLARATIONS
    --------------------------------
    When writing clean code, it often makes sense to use descriptive names for our variables. 
    For instance, it makes sense to name a variable "noise" to represent a noise signal, or "saw" to represent a sawtooth wave, etc.

    When a variable name is a reserved keyword in the programming language (e.g., "for", "while", "null", etc.), the parser will let you know that those keywords cannot be used as variable names.
    This is also the case in bell â€” trying to use, say, "print" as a variable name is not allowed, because it is a native function in bell.
    However, the same will not happen when using variables with the same name as those included in bellplay~.
    This means that a bellplay~ function, like "render", would be overwritten if you create a variable with that name, and the parser wouldn't care to tell you.
    
    That is why, in bellplay~, variable declarations should always be local (i.e., $<varname> instead <varname>) to prevent namespacing collisions.
    In other words, only use global declarations (without the '$' prefix) when absolutely necessary, and make sure your variable name does not already exist in bellplay~.
    If you accidentally use a global variable that already exists in bellplay~, simply restart the application to restore the values.

    The code below illustrates how using local variables does not result in any namespace collisions.
)#

## generate a buffer with the global function "saw" and store it in the local variable "$saw"
$saw = saw(@frequency 220 @duration 1000);
$saw.transcribe();

## generate a second buffer with the global function "saw" and override the previous value of the "$saw" variable
## note that since the '$saw' variable is local (prefixed with $), it does not override the global 'saw' function.
$saw = saw(@frequency 440 @duration 500);
$saw.transcribe();

## render transcribed buffers
render()
