"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[8384],{6088:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learning/examples/midiretuning","title":"6. MIDI Retuning","description":"An example of JI-based retuning of MIDI events.","source":"@site/docs/learning/examples/midiretuning.md","sourceDirName":"learning/examples","slug":"/learning/examples/midiretuning","permalink":"/bellplay/docs/learning/examples/midiretuning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"6. MIDI Retuning"},"sidebar":"tutorialSidebar","previous":{"title":"5. Glissando texture","permalink":"/bellplay/docs/learning/examples/gliss"},"next":{"title":"7. Temporal Quantization","permalink":"/bellplay/docs/learning/examples/temporalquantization"}}');var o=t(4848),r=t(8453);const s={sidebar_position:5,title:"6. MIDI Retuning"},a="MIDI Retuning",l={},c=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"midi-retuning",children:"MIDI Retuning"})}),"\n",(0,o.jsx)(n.p,{children:"An example of JI-based retuning of MIDI events.\nIt's a basic demonstration of how MIDI files can be algorithmically manipulated in non-conventional ways."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bell",metastring:'title="midi_retuning.bell" showLineNumbers',children:"## Define a set of pitch classes using ratio-to-pitch class conversion (based on LaMonte Young's WTP tuning)\n$pitchclasses = r2pc(1/1 567/512 9/8 147/128 21/16 1323/1024 189/128 3/2 49/32 7/4 441/256 63/32, 0);\n## Import MIDI events\n$events = importmidi('bach.mid');\n## Define a sustain multiplier for extending note durations\n$sustain = 4;\n## Loop through each event in the imported MIDI \nfor $event in $events do (\n    ## Extract note pitch, onset time, duration, and velocity from the event\n    $pitch = $event.getkey('pitch');\n    $onset = $event.getkey('onset');\n    $duration = $event.getkey('duration');\n    $velocity = $event.getkey('velocity');\n    ## Compute and apply pitch retuning based on the predefined pitch classes\n    $retuning = pitchdiff($pitch, $pitchclasses);\n    $pitch += $retuning;\n    ## Use an ezsampler instrument to synthesize the note with modified parameters\n    ezsampler(\n        ## Apply retuned pitch value\n        @pitch $pitch\n        ## Extend note duration\n        @duration $duration * $sustain\n        ## Maintain original velocity\n        @velocity $velocity\n    ).transcribe(\n        ## Set transcription onset time\n        @onset $onset\n        ## Apply amplitude envelope\n        @gain [0 1 0] [1 0 0.125] \n    ) \n);\n## Render with reverb processing\nrender(\n    @play 1 @process freeverb(\n        ## Set the reverb room size\n        @roomsize 0.9\n        ## Control the wet/dry mix of the reverb\n        @wet 0.05\n        ## Adjust damping for high-frequency absorption\n        @damp 1\n        ## Set stereo width for the effect\n        @width 1\n    ) \n)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);