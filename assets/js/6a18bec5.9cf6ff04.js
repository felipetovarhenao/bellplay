"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[6936],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const r={},l=a.createContext(r);function s(e){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(l.Provider,{value:t},e.children)}},93238:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"reference/data-utilities/createdbtable","title":"createdbtable","description":"createdbtable","source":"@site/docs/reference/data-utilities/createdbtable.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/createdbtable","permalink":"/docs/reference/data-utilities/createdbtable","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"querydb","permalink":"/docs/tags/querydb"},{"inline":true,"label":"readdb","permalink":"/docs/tags/readdb"},{"inline":true,"label":"writedb","permalink":"/docs/tags/writedb"}],"version":"current","frontMatter":{"hide_title":true,"tags":["querydb","readdb","writedb"]},"sidebar":"tutorialSidebar","previous":{"title":"contains","permalink":"/docs/reference/data-utilities/contains"},"next":{"title":"createtree","permalink":"/docs/reference/data-utilities/createtree"}}');var r=n(74848),l=n(28453);const s={hide_title:!0,tags:["querydb","readdb","writedb"]},i=void 0,d={},c=[{value:"<code>createdbtable</code>",id:"createdbtable",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Usage",id:"usage",level:3}];function o(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"createdbtable",children:(0,r.jsx)(t.code,{children:"createdbtable"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",children:"createdbtable(\n    @data ? ## llll (required)\n    @name 'data'\n    @db null\n) -> null\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Creates and populates a ",(0,r.jsx)(t.a,{href:"https://www.sqlitetutorial.net/",children:"SQLite3"})," table with data entries.\nEach element or entry in ",(0,r.jsx)(t.code,{children:"@data"})," should be structured as a ",(0,r.jsx)(t.em,{children:"llll"})," of key-value pairs, where each key corresponds to a column name in the resulting table and each value is the corresponding data entry.\nFor example:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",metastring:'title="expected structure for each data entry"',children:"[ ## item 1\n    [ <key_1> <value_1> ]\n    [ <key_2> <value_2> ]\n    ...\n    [ <key_N> <value_N> ]\n]\n...\n[ ## item N\n    [ <key_1> <value_1> ]\n    [ <key_2> <value_2> ]\n    ...\n    [ <key_N> <value_N> ]\n]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This format ensures that the resulting table can be queried using standard SQL-style syntax, with each key becoming a column in the table schema."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@data ?"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"llll"})}),"]: Data from which to build SQL table, each element structured as a list of key-value pairs. (",(0,r.jsx)(t.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@name"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"symbol"})}),"]: SQL Table name, to be used with ",(0,r.jsx)(t.code,{children:"querydb"}),". For instance, for a table named ",(0,r.jsx)(t.code,{children:"'mytable'"}),", a basic query would be ",(0,r.jsx)(t.code,{children:"'SELECT * FROM mytable'"}),". (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"'data'"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@db"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"symbol/null"})}),"]: Optional database name. If set to ",(0,r.jsx)(t.code,{children:"null"}),", ",(0,r.jsx)(t.code,{children:"'main'"})," is used as the default database name. (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"null"}),")."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",metastring:"showLineNumbers",children:"## import MIDI events to use as data\n$events = importmidi('bach.mid');\n## create `notes` table based on MIDI events\ncreatedbtable(@data $events @name 'notes');\n## Use SQL query to retrieve all events with pitch class 0\n$results = querydb('SELECT * FROM notes WHERE pitch % 1200 == 0');\nprint($results) ## print results\n"})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);