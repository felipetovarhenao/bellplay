"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9732],{2571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"reference/data-utilities/createtable","title":"createtable","description":"createtable","source":"@site/docs/reference/data-utilities/createtable.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/createtable","permalink":"/docs/reference/data-utilities/createtable","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"contains","permalink":"/docs/reference/data-utilities/contains"},"next":{"title":"createtree","permalink":"/docs/reference/data-utilities/createtree"}}');var r=n(4848),s=n(8453);const l={hide_title:!0},i=void 0,c={},d=[{value:"<code>createtable</code>",id:"createtable",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Usage",id:"usage",level:3}];function o(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"createtable",children:(0,r.jsx)(t.code,{children:"createtable"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",children:"createtable(\n    @data ? ## llll (required)\n    @name 'data'\n) -> null\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Instantiates a ",(0,r.jsx)(t.a,{href:"https://www.sqlitetutorial.net/",children:"SQLite3"})," table given a list, where each element is expected to be a list of key-value pairs."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@data ?"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"llll"})}),"]: Data from which to build SQL table, each element structured as a list of key-value pairs. (",(0,r.jsx)(t.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@name"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"symbol"})}),"]: table name, to be used with ",(0,r.jsx)(t.code,{children:"querytable"}),". For instance, for a table named ",(0,r.jsx)(t.code,{children:"'mytable'"}),", a basic query would be ",(0,r.jsx)(t.code,{children:"'SELECT * FROM mytable'"}),". (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"'data'"}),")."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",metastring:"showLineNumbers",children:"## import MIDI events to use as data\n$events = importmidi('bach.mid');\n## create `notes` table based on MIDI events\ncreatetable(@data $events @name 'notes');\n## Use SQL query to retrieve all events with pitch class 0\n$results = querytable('SELECT * FROM notes WHERE pitch % 1200 == 0');\nprint($results) ## print results\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(6540);const r={},s=a.createContext(r);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);