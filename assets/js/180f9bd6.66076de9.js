"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7877],{28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var t=n(96540);const r={},l=t.createContext(r);function a(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:s},e.children)}},98317:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/buffer-analysis/spectralflatness","title":"spectralflatness","description":"spectralflatness","source":"@site/docs/reference/buffer-analysis/spectralflatness.md","sourceDirName":"reference/buffer-analysis","slug":"/reference/buffer-analysis/spectralflatness","permalink":"/docs/reference/buffer-analysis/spectralflatness","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyze","permalink":"/docs/tags/analyze"},{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"}],"version":"current","frontMatter":{"hide_title":true,"tags":["analyze","inspect"]},"sidebar":"tutorialSidebar","previous":{"title":"spectralcentroid","permalink":"/docs/reference/buffer-analysis/spectralcentroid"},"next":{"title":"spectralkurtosis","permalink":"/docs/reference/buffer-analysis/spectralkurtosis"}}');var r=n(74848),l=n(28453);const a={hide_title:!0,tags:["analyze","inspect"]},i=void 0,c={},d=[{value:"<code>spectralflatness</code>",id:"spectralflatness",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function o(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"spectralflatness",children:(0,r.jsx)(s.code,{children:"spectralflatness"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bell",children:"spectralflatness(\n    @mode 0\n) -> llll\n"})}),"\n",(0,r.jsx)(s.p,{children:"Generates an audio descriptor to calculate the spectral flatness of a buffer, defined as the ratio between the spectrum's geometric mean and arithmetic mean."}),"\n",(0,r.jsx)(s.p,{children:"The resulting buffer will be updated with the following keys:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"spectralflatness"})}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"spectralflatness"})," is a mirror implementation of the same algorithm in the ",(0,r.jsx)(s.a,{href:"https://essentia.upf.edu/",children:"Essentia"})," library.\nFor more details on the algorithm, please check the ",(0,r.jsx)(s.a,{href:"https://essentia.upf.edu/algorithms_reference.html",children:"Essentia Algorithms reference"}),"."]})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"@mode"})," [",(0,r.jsx)(s.em,{children:(0,r.jsx)(s.strong,{children:"int"})}),"]: analysis mode. (",(0,r.jsx)(s.em,{children:"default"}),": ",(0,r.jsx)(s.code,{children:"0"}),").","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"0"}),": global"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"1"}),": time series"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"2"}),": time-tagged time series"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"3"}),": buffer"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(s.p,{children:["spectralflatness descriptor [",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.em,{children:"llll"})}),"]"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"spectralflatness"})," is meant to be used with the ",(0,r.jsx)(s.code,{children:"analyze"})," function:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$descr = spectralflatness(); ## generate spectralflatness audio descriptor\n$buffer.inspect('before analysis');\n$buffer = $buffer.analyze($descr); ## apply analysis\n$buffer.inspect('after analysis')\n"})})]})}function f(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);