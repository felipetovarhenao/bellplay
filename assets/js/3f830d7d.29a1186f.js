"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[5678],{8372:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reference/data-utilities/integrate","title":"integrate","description":"integrate","source":"@site/docs/reference/data-utilities/integrate.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/integrate","permalink":"/docs/reference/data-utilities/integrate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"inspect","permalink":"/docs/reference/data-utilities/inspect"},"next":{"title":"interrupt","permalink":"/docs/reference/data-utilities/interrupt"}}');var r=n(4848),l=n(8453);const s={hide_title:!0},o=void 0,c={},d=[{value:"<code>integrate</code>",id:"integrate",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3}];function a(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"integrate",children:(0,r.jsx)(t.code,{children:"integrate"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",children:"integrate(\n    @llll ? ## llll (required)\n    @numsamples 100\n    @order 1\n    @origin 0\n) -> llll\n"})}),"\n",(0,r.jsx)(t.p,{children:"Computes the integral of a breakpoint function. Note that the slope of the integrated break-point function is always 0, since the output function is always piecewise linear."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@llll ?"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"llll"})}),"]: list of integers. (",(0,r.jsx)(t.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@numsamples"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"int"})}),"]: number of samples. (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"100"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@order"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"int/list"})}),"]: order of the integration, i.e. the number of times the integration should be subsequently performed. (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"1"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@origin"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"int/float"})}),"]: initial value of the integral function. If the order of the integration is greater than one, one origin for each different integration step can be defined. (",(0,r.jsx)(t.em,{children:"default"}),": ",(0,r.jsx)(t.code,{children:"0"}),")."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(t.p,{children:["Integrated breakpoint function. [",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.em,{children:"llll"})}),"]"]})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(6540);const r={},l=i.createContext(r);function s(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);