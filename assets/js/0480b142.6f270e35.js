"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[8070],{5585:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"faq","title":"FAQ","description":"Do I need programming experience to use bellplay~?","source":"@site/docs/faq.md","sourceDirName":".","slug":"/faq","permalink":"/docs/faq","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"FAQ"},"sidebar":"tutorialSidebar","previous":{"title":"Acknowledgments","permalink":"/docs/about/acknowledgments"}}');var a=i(4848),l=i(8453);const t={sidebar_position:6,title:"FAQ"},r="Frequently Asked Questions",o={},d=[{value:"Do I need programming experience to use <em>bellplay~</em>?",id:"do-i-need-programming-experience-to-use-bellplay",level:3},{value:"Can I use <em>bellplay~</em> for real-time audio?",id:"can-i-use-bellplay-for-real-time-audio",level:3},{value:"What&#39;s the best way to write and edit <em>bell</em> scripts?",id:"whats-the-best-way-to-write-and-edit-bell-scripts",level:3},{value:"What is the difference between <strong>bell</strong> and <strong>bellplay~</strong>?",id:"what-is-the-difference-between-bell-and-bellplay",level:3},{value:"Does <em>bellplay~</em> support multi-channel audio?",id:"does-bellplay-support-multi-channel-audio",level:3},{value:"Can I import and analyze my own audio files?",id:"can-i-import-and-analyze-my-own-audio-files",level:3},{value:"Do I need to know Max to use <em>bellplay~</em>?",id:"do-i-need-to-know-max-to-use-bellplay",level:3},{value:"Is there a limit on how many buffers or layers I can use?",id:"is-there-a-limit-on-how-many-buffers-or-layers-i-can-use",level:3},{value:"Is <em>bellplay~</em> free to use?",id:"is-bellplay-free-to-use",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",p:"p",strong:"strong",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"frequently-asked-questions",children:"Frequently Asked Questions"})}),"\n",(0,a.jsxs)(n.h3,{id:"do-i-need-programming-experience-to-use-bellplay",children:["Do I need programming experience to use ",(0,a.jsx)(n.em,{children:"bellplay~"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:["Yes\u2014some familiarity with programming concepts is recommended. ",(0,a.jsx)(n.em,{children:"bellplay~"})," is controlled entirely through code written in the ",(0,a.jsx)(n.code,{children:"bell"})," language. While the syntax is streamlined, users are expected to understand basic ideas such as variables, function calls, and loops. The environment does not use visual patching or graphical interfaces, which allows for highly dynamic and flexible algorithms."]}),"\n",(0,a.jsxs)(n.p,{children:["For users new to programming or the ",(0,a.jsx)(n.code,{children:"bell"})," language, the ",(0,a.jsx)(n.a,{href:"https://felipetovarhenao.github.io/bell-tutorials/",children:"bell tutorials"})," provide a structured introduction, with examples geared toward musicians and sound artists."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"can-i-use-bellplay-for-real-time-audio",children:["Can I use ",(0,a.jsx)(n.em,{children:"bellplay~"})," for real-time audio?"]}),"\n",(0,a.jsxs)(n.p,{children:["No. ",(0,a.jsx)(n.em,{children:"bellplay~"})," is designed exclusively for ",(0,a.jsx)(n.strong,{children:"offline"})," workflows. This means all audio rendering is deferred: you run a script, and it produces audio output once it completes. This enables features like multi-pass rendering, non-causal operations, and batch processing\u2014techniques that are not feasible in real-time environments."]}),"\n",(0,a.jsxs)(n.p,{children:["For real-time needs, consider alternatives like ",(0,a.jsx)(n.a,{href:"https://cycling74.com/",children:"Max"}),", ",(0,a.jsx)(n.a,{href:"https://supercollider.github.io/",children:"SuperCollider"}),", or ",(0,a.jsx)(n.a,{href:"https://tidalcycles.org/",children:"TidalCycles"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"whats-the-best-way-to-write-and-edit-bell-scripts",children:["What's the best way to write and edit ",(0,a.jsx)(n.em,{children:"bell"})," scripts?"]}),"\n",(0,a.jsxs)(n.p,{children:["Since ",(0,a.jsx)(n.em,{children:"bellplay~"})," is script-based, using a capable text editor is essential. Writing ",(0,a.jsx)(n.code,{children:".bell"})," files in a basic editor can be error-prone and difficult to navigate\u2014especially as scripts grow in complexity."]}),"\n",(0,a.jsxs)(n.p,{children:["To improve the experience, it's recommended to use ",(0,a.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})," along with the ",(0,a.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=tovarhenao.bellplay-plugin",children:(0,a.jsx)(n.code,{children:"bellplay-plugin"})})," extension. This provides syntax highlighting, autocompletion, and formatting tools that make editing more efficient and less error-prone."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"what-is-the-difference-between-bell-and-bellplay",children:["What is the difference between ",(0,a.jsx)(n.strong,{children:"bell"})," and ",(0,a.jsx)(n.strong,{children:"bellplay~"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"bell"})," is a programming language designed by Andrea Agostini and Jean Louis Giavitto, primarily for computer-assisted composition (CAC). It is a text-based language that runs inside the Max environment (via the ",(0,a.jsx)(n.em,{children:"bach"})," package), and supports algorithmic and symbolic music processing. It is highly expressive for defining music-oriented logic and data structures."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"bellplay~"}),", on the other hand, is a software environment and framework built around the ",(0,a.jsx)(n.em,{children:"bell"})," language, extending it to handle audio synthesis, processing, analysis in a symbolic (i.e., notation-based) paradigm. While it uses ",(0,a.jsx)(n.em,{children:"bell"})," as the scripting language, ",(0,a.jsx)(n.strong,{children:"bellplay~"})," provides an integrated interface for algorithmic audio. It is tailored to facilitate the generation of audio and symbolic content within the same environment."]}),"\n",(0,a.jsxs)(n.p,{children:["In short, ",(0,a.jsx)(n.em,{children:"bell"})," is a programming language, and ",(0,a.jsx)(n.strong,{children:"bellplay~"})," the environment and framework built around ",(0,a.jsx)(n.em,{children:"bell"})," for algorithmic audio."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"does-bellplay-support-multi-channel-audio",children:["Does ",(0,a.jsx)(n.em,{children:"bellplay~"})," support multi-channel audio?"]}),"\n",(0,a.jsxs)(n.p,{children:["Yes. Multichannel audio is supported natively, from stereo, to multichannel 1-dimensional panning, to higher-order ambisonics (see ",(0,a.jsx)(n.code,{children:"hoaencode"})," and ",(0,a.jsx)(n.code,{children:"hoadecode"})," functions). Buffers carry metadata such as channel count and can be processed accordingly."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"can-i-import-and-analyze-my-own-audio-files",children:"Can I import and analyze my own audio files?"}),"\n",(0,a.jsxs)(n.p,{children:["Yes. Audio files can be imported using ",(0,a.jsx)(n.code,{children:"importaudio"}),", and processed and analyzed using the ",(0,a.jsx)(n.code,{children:"process"})," and ",(0,a.jsx)(n.code,{children:"analyze"})," functions. Audio descriptors such as loudness, MFCCs, spectral centroid, and pitch are available. You can use these features for inspection, querying, or synthesis tasks."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"do-i-need-to-know-max-to-use-bellplay",children:["Do I need to know Max to use ",(0,a.jsx)(n.em,{children:"bellplay~"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:["No. While ",(0,a.jsx)(n.em,{children:"bellplay~"})," is built on Max, you don\u2019t need to use patching or understand Max internals. The entire user interaction is script-based, via the ",(0,a.jsx)(n.code,{children:"bell"})," language. A standalone app is available for macOS. On Windows, Max is required, but only as a runtime environment."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"is-there-a-limit-on-how-many-buffers-or-layers-i-can-use",children:"Is there a limit on how many buffers or layers I can use?"}),"\n",(0,a.jsx)(n.p,{children:"No. There\u2019s no hard limit. Since audio is rendered offline, you're only constrained by your system\u2019s memory and disk space. This makes it straightforward to work with dense polyphonic textures, granular processes, or large corpora."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h3,{id:"is-bellplay-free-to-use",children:["Is ",(0,a.jsx)(n.em,{children:"bellplay~"})," free to use?"]}),"\n",(0,a.jsxs)(n.p,{children:["Yes. It\u2019s distributed under the ",(0,a.jsx)(n.a,{href:"https://www.gnu.org/licenses/gpl-3.0.en.html",children:"GPL-3.0 license"}),", and the standalone app does not require a Max license."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var s=i(6540);const a={},l=s.createContext(a);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);