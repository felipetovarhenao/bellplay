"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7034],{6981:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"learning/tutorials/buildcorpus","title":"19. Creating Audio Corpora","description":"This tutorial shows how to create a simple corpus based on the long-term loudness, and then load and use the corpus.","source":"@site/docs/learning/tutorials/buildcorpus.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/buildcorpus","permalink":"/docs/learning/tutorials/buildcorpus","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"sidebar_position":18,"title":"19. Creating Audio Corpora"},"sidebar":"tutorialSidebar","previous":{"title":"18. Audio Corpora","permalink":"/docs/learning/tutorials/corpus"},"next":{"title":"20. Caching Data","permalink":"/docs/learning/tutorials/caching"}}');var o=r(4848),s=r(8453);const i={sidebar_position:18,title:"19. Creating Audio Corpora"},a="Creating Audio Corpora",u={},l=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"creating-audio-corpora",children:"Creating Audio Corpora"})}),"\n",(0,o.jsx)(n.p,{children:"This tutorial shows how to create a simple corpus based on the long-term loudness, and then load and use the corpus."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bell",metastring:'title="creating_audio_corpora.bell" showLineNumbers',children:"## output path for corpus\n$corpuspath = './mycorpus.llll';\n## create corpus if it doesn't exist yet\nif $corpuspath.exists() == 0 then (\n    ## corpus files\n    $files = getmediafiles('audio');\n    ## create new corpus\n    buildcorpus(\n        @files $files\n        @descriptors (\n            ## analyze every file in terms of its long-term loudness\n            larm() \n        ) \n        ## onset-based segmentation\n        @segmode 1\n        ## set output path\n        @outpath $corpuspath\n    );\n    print('Corpus created. \ud83d\udc4c\ud83c\udffd') \n) else (\n    ## load pre-existing corpus\n    setcorpus($corpuspath) \n);\n## query corpus using SQLite3 syntax\n$buffers = query('SELECT * FROM buffers ORDER BY larm');\n$onset = 0;\n## transcribe buffer results from query\nfor $buff in $buffers do (\n    $buff.transcribe(\n        @onset $onset @pan rand() \n    );\n    $onset += 33\n);\n## trigger rendering\nrender(\n    @play 1 @process normalize() \n)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);