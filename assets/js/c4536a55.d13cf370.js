"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[2443],{6736:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"learning/examples/waveshaping","title":"4. Waveshaping Buffers","description":"A basic example of waveshaping in bellplay~, using a randomly generated breakpoint function.","source":"@site/docs/learning/examples/waveshaping.md","sourceDirName":"learning/examples","slug":"/learning/examples/waveshaping","permalink":"/bellplay/docs/learning/examples/waveshaping","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"4. Waveshaping Buffers"},"sidebar":"tutorialSidebar","previous":{"title":"3. Feedback Synthesis","permalink":"/bellplay/docs/learning/examples/feedbacksynth"},"next":{"title":"5. Glissando texture","permalink":"/bellplay/docs/learning/examples/gliss"}}');var t=a(4848),i=a(8453);const r={sidebar_position:3,title:"4. Waveshaping Buffers"},o="Waveshaping Buffers",l={},p=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"waveshaping-buffers",children:"Waveshaping Buffers"})}),"\n",(0,t.jsxs)(n.p,{children:["A basic example of waveshaping in ",(0,t.jsx)(n.strong,{children:"bellplay~"}),", using a randomly generated breakpoint function.\nThis BPF is applied to a drum loop to introduce nonlinear scrubbing, followed by spatialization using a dynamic pan envelope."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:'title="waveshaping_buffers.bell" showLineNumbers',children:"## set number of breakpoints for the waveshaper\n$bpfsize = 100;\n## generate x-values for the breakpoint function\n## - quadratic distribution emphasizes values near 0\n$xbpf = dx2x(for $i in 1...$bpfsize collect rand() ** 2);\n## build breakpoint function: list of [x y slope] triplets\n$bpf = for $x in $xbpf collect (\n    ## y-values span an exponential range, randomly signed\n    $y = exp2(rand(-2, 2)) * choose(-1 1);\n    ## slope values between 0.15 and 0.99\n    $s = rand(0.15, 0.99);\n    [$x $y $s] \n);\n## import drum loop as audio buffer\n$b = importaudio('drums.wav');\n## apply waveshaping using the custom breakpoint function\n## - process spans full duration of input buffer\n$fx = waveshape($bpf @duration $b.getkey('duration'));\n## process buffer and spatialize with pan automation\n## - starts at left, moves center, then slightly right\n$b.process($fx).transcribe(\n    @pan [0 0 0] [0.5 1 0] [1 0.5 -0.25] \n);\n## render and play result, normalize output to -3 dB\nrender(\n    @play 1 @process normalize(-3) \n)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var s=a(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);