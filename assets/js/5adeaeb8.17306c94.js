"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[3176],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const r={},l=i.createContext(r);function s(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:t},e.children)}},71270:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"reference/data-utilities/inlet","title":"inlet","description":"inlet","source":"@site/docs/reference/data-utilities/inlet.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/inlet","permalink":"/docs/reference/data-utilities/inlet","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"importmidi","permalink":"/docs/reference/data-utilities/importmidi"},"next":{"title":"insert","permalink":"/docs/reference/data-utilities/insert"}}');var r=n(74848),l=n(28453);const s={hide_title:!0},o=void 0,c={},a=[{value:"<code>inlet</code>",id:"inlet",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3}];function d(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"inlet",children:(0,r.jsx)(t.code,{children:"inlet"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",children:"inlet(\n    \n) -> llll/null\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"inlet"})," is a built-in function in the ",(0,r.jsx)(t.em,{children:"bell"})," programming language and is not unique or exclusive to ",(0,r.jsx)(t.strong,{children:"bellplay~"}),"."]})}),"\n",(0,r.jsxs)(t.p,{children:["Returns the number of the inlet that triggered the computation. This is always ",(0,r.jsx)(t.code,{children:"1"}),", unless you set the ",(0,r.jsx)(t.code,{children:"@triggers"})," attribute to a different value. If the computation has been triggered by a trigger variable, rather than an inlet, the function returns ",(0,r.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(t.p,{children:["Number of the inlet that triggered the computation. [",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.em,{children:"llll/null"})}),"]"]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"inlet"})," will return ",(0,r.jsx)(t.code,{children:"null"})," ",(0,r.jsx)(t.em,{children:"without raising an error"})," if required arguments are not provided."]})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);