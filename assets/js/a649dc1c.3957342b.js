"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9376],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(a.Provider,{value:n},e.children)}},9530:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learning/tutorials/sampling","title":"21. Basic Sampling","description":"bellplay~ provides a basic utility function for general-purpose audio sampling, called ezsampler.","source":"@site/docs/learning/tutorials/sampling.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/sampling","permalink":"/bellplay/docs/learning/tutorials/sampling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"21. Basic Sampling"},"sidebar":"tutorialSidebar","previous":{"title":"20. Multi-rendering","permalink":"/bellplay/docs/learning/tutorials/multirendering"},"next":{"title":"22. Importing MIDI","permalink":"/bellplay/docs/learning/tutorials/importingmidi"}}');var t=s(4848),a=s(8453);const l={sidebar_position:20,title:"21. Basic Sampling"},o="Basic Sampling",r={},c=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"basic-sampling",children:"Basic Sampling"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"bellplay~"})," provides a basic utility function for general-purpose audio sampling, called ",(0,t.jsx)(n.code,{children:"ezsampler"}),".\nAs explained in the reference documentation, ",(0,t.jsx)(n.code,{children:"ezsampler"})," takes information such as pitch, velocity, and\nduration, and generates a buffer that best approximates that information, given some sampling specification called keymap."]}),"\n",(0,t.jsxs)(n.p,{children:["The code belows shows the different ways in which we can create sampler keymaps to use with ezsampler.\nAs always, check the reference documentation to understand the different parameters available in ",(0,t.jsx)(n.code,{children:"ezsampler"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:'title="basic_sampling.bell" showLineNumbers',children:"## At its most basic, a sampler keymap is a list of pitches with a corresponding audio file.\n$keymap1 = (\n    ## if we only provide one pitch-sample pair, the same sample is used for all pitches\n    [6000 'guitar.wav' ] \n);\n## we can specify multiple pitch-sample pairs.\n$keymap2 = (\n    ## this sample is used when pitch is closest to 6000\n    [6000 'guitar.wav' ] \n    ## this sample is used when pitch is closest to 6900\n    [6900 'flute.wav' ] \n);\n## we can also break down samples based on velocity\n$keymap3 = (\n    ## this sample is used when pitch is closest to 6000\n    [6000 'guitar.wav'] \n    ## these samples are used when pitch is closest to 6900\n    [\n        6900\n        ## this sample is used when pitch is closest to 6900 AND velocity is closest to 127\n        [127 'flute.wav'] \n        ## this sample is used when pitch is closest to 6900 AND velocity is closest to 0\n        [0 'viola.wav'] \n    ] \n);\n## we can make samplers less predictable by specifying multiple samples per pitch or velocity\n$keymap4 = (\n    ## one these samples will be chosen at random when pitch is closest to 6900\n    [\n        6900 'flute.wav' 'viola.wav' \n    ] \n);\n## generate some pitches\n$numnotes = 8;\n$harmonics = f2mc((1...$numnotes) * 110);\n$onset = 0;\n$dur = 300;\n## transcribe pitches using each keymap.\nfor $keymap $id in [$keymap1] [$keymap2] [$keymap3] [$keymap4] with @unwrap 1 do (\n    addmarker($onset, 'keymap' $id);\n    for $mc in $harmonics do (\n        ezsampler(\n            @pitch $mc\n            @duration $dur * 1.1\n            ## subtle legato\n            @keymap $keymap\n            @velocity rand(127) \n            ## randomize velocity\n            \n        ).transcribe( @onset $onset);\n        $onset += $dur\n    );\n    $onset += 1000\n);\n## trigger rendering\nrender(\n    @play 1 @process normalize(-3) \n)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);