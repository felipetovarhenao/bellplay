"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[8779],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},9524:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"learning/examples/resynthesis","title":"1. Audio Resynthesis","description":"A simple demonstration of granular quasi-resynthesis via partial tracks, where an sound is used to guide the behavior of sinusoidal grains.","source":"@site/docs/learning/examples/resynthesis.md","sourceDirName":"learning/examples","slug":"/learning/examples/resynthesis","permalink":"/bellplay/docs/learning/examples/resynthesis","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"1. Audio Resynthesis"},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/bellplay/docs/category/examples"},"next":{"title":"2. Basic Granulation","permalink":"/bellplay/docs/learning/examples/basicgranulation"}}');var a=t(4848),s=t(8453);const r={sidebar_position:0,title:"1. Audio Resynthesis"},o="Audio Resynthesis",l={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"audio-resynthesis",children:"Audio Resynthesis"})}),"\n",(0,a.jsx)(n.p,{children:"A simple demonstration of granular quasi-resynthesis via partial tracks, where an sound is used to guide the behavior of sinusoidal grains.\nIt focuses on extracting partials trakcs, mapping them onto synthesis parameters, and rebuilding the sound with flexible control over pitch, register, and time."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bell",metastring:'title="audio_resynthesis.bell" showLineNumbers',children:"## Import an audio buffer from the file 'poem.wav'\n$b = importaudio('poem.wav');\n## Transcribe the original audio file for reference\n$b.transcribe(@gain 0.5);\n## Define hop size for spectral analysis in samples\n$hopsize = 512;\n## Perform partial tracking analysis with a magnitude threshold\n$analysis = $b.buf2ptracks(@magnitudethreshold 0.05 @hopsize $hopsize);\n## Convert hop size to milliseconds based on the sample rate\n$incr = $hopsize * 1000 / $b.getkey('sr');\n## Extract frequency and magnitude data from the analysis\n$freqs = $analysis.getkey('frequencies');\n$mags = $analysis.getkey('magnitudes');\n## Define overlap factor for randomized timing variations\n$overlap = 4;\n## Define pitch classes for retuning\n$pcs = 0 2 3 5 7 8 10;\n## Loop through frequency and magnitude data\nfor $freq $addr in $freqs, $mag in $mags with @maxdepth -1 do (\n    ## Ensure the frequency is valid (greater than 0)\n    if $freq > 0 then (\n        ## Determine the onset frame index\n        $frame = $addr:2;\n        ## Compute the onset time in milliseconds\n        $onset = ($frame - 1) * $incr;\n        ## Randomly select a duration for the event\n        $dur = rand(100, 500);\n        ## Apply jitter to onset timing for more natural variation\n        $jit = rand(-1, 1) * $incr * $overlap;\n        ## Convert frequency to MIDI cents\n        $pitch = f2mc($freq);\n        ## Apply a random octave shift (in MIDI cents)\n        $octshift = random(-1, 4) * 1200;\n        ## Compute pitch difference and retune accordingly\n        $retune = pitchdiff($pitch, $pcs);\n        $freq *= c2r($retune + $octshift);\n        ## Randomize stereo panning\n        $pan = rand();\n        ## Generate a cycle-based waveform with the computed frequency and duration\n        cycle(@frequency $freq @duration $dur).transcribe(\n            ## Apply jittered onset time\n            @onset $onset + $jit\n            ## Apply random panning\n            @pan $pan\n            ## Apply amplitude envelope based on magnitude\n            @gain [0 $mag ** 2 0] [1 0 -0.66] \n        ) \n    ) \n);\n## Render the processed audio with normalization\nrender(\n    ## Apply normalization to -6 dB\n    @play 1 @process normalize(-6) \n)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);