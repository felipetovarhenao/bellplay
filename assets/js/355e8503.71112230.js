"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[2235],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var s=i(96540);const r={},l=s.createContext(r);function d(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(l.Provider,{value:n},e.children)}},68539:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"reference/buffer-operations/divide","title":"divide","description":"divide","source":"@site/docs/reference/buffer-operations/divide.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/divide","permalink":"/docs/reference/buffer-operations/divide","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"process","permalink":"/docs/tags/process"}],"version":"current","frontMatter":{"hide_title":true,"tags":["inspect","process"]},"sidebar":"tutorialSidebar","previous":{"title":"degrade","permalink":"/docs/reference/buffer-operations/degrade"},"next":{"title":"dynamics","permalink":"/docs/reference/buffer-operations/dynamics"}}');var r=i(74848),l=i(28453);const d={hide_title:!0,tags:["inspect","process"]},c=void 0,o={},t=[{value:"<code>divide</code>",id:"divide",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"divide",children:(0,r.jsx)(n.code,{children:"divide"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"divide(\n    @operand 1\n    @resamplingfiltersize 11\n    @resamplingmode 'sinc'\n    @resamplingpolicy 3\n    @envtimeunit 2\n) -> llll\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates an audio process operation for performing division on a buffer."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@operand"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float/llll"})}),"]: value to divide buffer by either as a single number, envelope, or buffer. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@resamplingfiltersize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: resampling filter size. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"11"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@resamplingmode"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: resampling mode. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'sinc'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'sinc'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'nearest neighbor'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'sample and hold'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'linear'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'quad'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'cubic'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@resamplingpolicy"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: resampling policy. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"3"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": don't"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": to lowest"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": to highest"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": to most common"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": to max. current"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@envtimeunit"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: envelope time unit. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"2"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": milliseconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": duration ratio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": milliseconds difference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": samples difference"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(n.p,{children:["divide operation [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"divide"})," is meant to be used with the ",(0,r.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = divide([0 1 0] [1 10 -0.125]); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after divide process')\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);