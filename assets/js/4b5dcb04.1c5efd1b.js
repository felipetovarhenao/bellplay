"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9077],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},9681:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"reference/audio-processing/mixdown","title":"mixdown","description":"mixdown","source":"@site/docs/reference/audio-processing/mixdown.md","sourceDirName":"reference/audio-processing","slug":"/reference/audio-processing/mixdown","permalink":"/docs/reference/audio-processing/mixdown","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"mix","permalink":"/docs/reference/audio-processing/mix"},"next":{"title":"multiply","permalink":"/docs/reference/audio-processing/multiply"}}');var r=i(4848),c=i(8453);const o={hide_title:!0},l=void 0,d={},t=[{value:"<code>mixdown</code>",id:"mixdown",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"mixdown",children:(0,r.jsx)(n.code,{children:"mixdown"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"mixdown(\n    @numchannels 1\n    @channelmode 3\n    @autogain 0\n) -> llll\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Audio process operation for mixing down (or up) the number of channels of a buffer. See ",(0,r.jsx)(n.code,{children:"process"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@numchannels"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of output channels."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@channelmode"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: downmixing channel conversion type.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": delete all samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": only keep existing channels"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": pad last channel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": cyclic repetition of channels while upmixing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": palindrome cycling of channels while upmixing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"5"}),": pan channels to new configuration"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@autogain"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: apply audio compensation, based on ratio between input and output channels.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output"})}),"\n",(0,r.jsxs)(n.p,{children:["onepole operation [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);