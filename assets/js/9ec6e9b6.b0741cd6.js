"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[324],{28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>f});var n=s(96540);const o={},t=n.createContext(o);function i(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function f(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(t.Provider,{value:r},e.children)}},40820:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>f,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"reference/buffer-operations/fromdiffs","title":"fromdiffs","description":"fromdiffs","source":"@site/docs/reference/buffer-operations/fromdiffs.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/fromdiffs","permalink":"/docs/reference/buffer-operations/fromdiffs","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"process","permalink":"/docs/tags/process"}],"version":"current","frontMatter":{"hide_title":true,"tags":["inspect","process"]},"sidebar":"tutorialSidebar","previous":{"title":"freqshift","permalink":"/docs/reference/buffer-operations/freqshift"},"next":{"title":"gain","permalink":"/docs/reference/buffer-operations/gain"}}');var o=s(74848),t=s(28453);const i={hide_title:!0,tags:["inspect","process"]},f=void 0,c={},l=[{value:"<code>fromdiffs</code>",id:"fromdiffs",level:2},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const r={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"fromdiffs",children:(0,o.jsx)(r.code,{children:"fromdiffs"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bell",children:"fromdiffs() -> llll\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Generates an audio process operation to perform discrete integration of a buffer. This is the equivalent of ",(0,o.jsx)(r.code,{children:"dx2x"})," for buffer samples."]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"output",children:"Output"}),"\n",(0,o.jsxs)(r.p,{children:["fromdiffs operation [",(0,o.jsx)(r.strong,{children:(0,o.jsx)(r.em,{children:"llll"})}),"]"]}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"fromdiffs"})," is meant to be used with the ",(0,o.jsx)(r.code,{children:"process"})," function:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = fromdiffs(); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after fromdiffs process')\n"})})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);