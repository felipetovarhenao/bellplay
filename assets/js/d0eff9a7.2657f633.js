"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[4961],{7985:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"reference/data-utilities/symdiff","title":"symdiff","description":"symdiff","source":"@site/docs/reference/data-utilities/symdiff.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/symdiff","permalink":"/docs/reference/data-utilities/symdiff","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"sum","permalink":"/docs/reference/data-utilities/sum"},"next":{"title":"symlen","permalink":"/docs/reference/data-utilities/symlen"}}');var r=i(4848),t=i(8453);const s={hide_title:!0},d=void 0,c={},o=[{value:"<code>symdiff</code>",id:"symdiff",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3}];function u(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"symdiff",children:(0,r.jsx)(n.code,{children:"symdiff"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"symdiff(\n    @llll1 ? ## required\n    @llll2 ? ## required\n    @function null\n) -> llll/null\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"symdiff"})," is a built-in function in the ",(0,r.jsx)(n.em,{children:"bell"})," programming language and is not unique or exclusive to ",(0,r.jsx)(n.strong,{children:"bellplay~"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the symmetric difference of two ",(0,r.jsx)(n.em,{children:"lllls"}),". A comparison function can be provided through the ",(0,r.jsx)(n.code,{children:"@function"})," argument, otherwise it performs a stardard comparison"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@llll1"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"llll"})}),"] (",(0,r.jsx)(n.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@llll2"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"llll"})}),"] (",(0,r.jsx)(n.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@function"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"function/null"})}),"] (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"null"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(n.p,{children:["Symmetric difference of two ",(0,r.jsx)(n.em,{children:"lllls"}),". [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll/null"})}),"]"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"symdiff"})," will return ",(0,r.jsx)(n.code,{children:"null"})," ",(0,r.jsx)(n.em,{children:"without raising an error"})," if required arguments are not provided."]})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var l=i(6540);const r={},t=l.createContext(r);function s(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);