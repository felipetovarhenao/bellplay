"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[5826],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var t=r(96540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},90299:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>o,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/buffer-analysis/rhythm","title":"rhythm","description":"rhythm","source":"@site/docs/reference/buffer-analysis/rhythm.md","sourceDirName":"reference/buffer-analysis","slug":"/reference/buffer-analysis/rhythm","permalink":"/docs/reference/buffer-analysis/rhythm","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyze","permalink":"/docs/tags/analyze"},{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"}],"version":"current","frontMatter":{"hide_title":true,"tags":["analyze","inspect"]},"sidebar":"tutorialSidebar","previous":{"title":"pitchyin","permalink":"/docs/reference/buffer-analysis/pitchyin"},"next":{"title":"rolloff","permalink":"/docs/reference/buffer-analysis/rolloff"}}');var s=r(74848),i=r(28453);const l={hide_title:!0,tags:["analyze","inspect"]},c=void 0,a={},d=[{value:"<code>rhythm</code>",id:"rhythm",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"rhythm",children:(0,s.jsx)(n.code,{children:"rhythm"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",children:"rhythm(\n    @maxtempo 208\n    @mintempo 40\n    @method 'multifeature'\n) -> llll\n"})}),"\n",(0,s.jsx)(n.p,{children:"Audio descriptor for extract the beat positions and estimate their confidence as well as tempo in bpm for a buffer."}),"\n",(0,s.jsx)(n.p,{children:"The resulting buffer will be updated with the following keys:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rhythm_bpm"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rhythm_ticks"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rhythm_estimates"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"rhythm_intervals"})}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rhythm"})," is a mirror implementation of the same algorithm in the ",(0,s.jsx)(n.a,{href:"https://essentia.upf.edu/",children:"Essentia"})," library.\nFor more details on the algorithm, please check the ",(0,s.jsx)(n.a,{href:"https://essentia.upf.edu/algorithms_reference.html",children:"Essentia Algorithms reference"}),"."]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@maxtempo"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: fastest tempo to detect, between 60 and 250. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"208"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@mintempo"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: slowest tempo to detect, between 40 and 180. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"40"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@method"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"symbol"})}),"]: method used for beat tracking. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"'multifeature'"}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'degara'"}),": degara method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'multifeature'"}),": multifeature method"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["rhythm descriptor [",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rhythm"})," is meant to be used with the ",(0,s.jsx)(n.code,{children:"analyze"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$descr = rhythm(); ## generate rhythm audio descriptor\n$buffer.inspect('before analysis');\n$buffer = $buffer.analyze($descr); ## apply analysis\n$buffer.inspect('after analysis')\n"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);