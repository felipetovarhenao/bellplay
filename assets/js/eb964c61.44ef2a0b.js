"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9631],{5046:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"reference/audio-processing/render","title":"render","description":"render","source":"@site/docs/reference/audio-processing/render.md","sourceDirName":"reference/audio-processing","slug":"/reference/audio-processing/render","permalink":"/docs/reference/audio-processing/render","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"rampsmooth","permalink":"/docs/reference/audio-processing/rampsmooth"},"next":{"title":"repeat","permalink":"/docs/reference/audio-processing/repeat"}}');var i=r(4848),l=r(8453);const c={hide_title:!0},d=void 0,o={},t=[{value:"<code>render</code>",id:"render",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"render",children:(0,i.jsx)(n.code,{children:"render"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",children:"render(\n    @numchannels 2\n    @panmode 0\n    @sr 48000\n    @normalize 0\n    @play 0\n    @spread 1\n    @fade 5\n    @reset 0\n    @process null\n) -> llll\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Triggers audio rendering of all transcribed buffers via ",(0,i.jsx)(n.code,{children:"transcribe"}),", and returns the rendered buffer. Note that it's possible to apply post-rendering processing by passing audio processing operations (e.g., ",(0,i.jsx)(n.code,{children:"reverse"}),", ",(0,i.jsx)(n.code,{children:"freeverb"}),", ",(0,i.jsx)(n.code,{children:"clip"}),", etc.) to the ",(0,i.jsx)(n.code,{children:"@process"})," arguments, but these audio modifications won't be accurately reflected in the score transcription. See ",(0,i.jsx)(n.code,{children:"process"})," function."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@numchannels"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: number of output channels."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@panmode"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: panning mode.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": linear"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": circular"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@sr"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: sampling rate."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@normalize"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: audio normalization.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": never"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": always"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"}),": overload protection only"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@play"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: autoplay rendered buffer.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@spread"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int/float"})}),"]: multichannel panning spread, between 0 and 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@fade"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int/float"})}),"]: fade in/out applied to every buffer, in milliseconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@reset"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: remove all previously transcribed buffers after rendering.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@process"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"list/llll/null"})}),"]: optional post-rendering audio processing operations."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output"})}),"\n",(0,i.jsxs)(n.p,{children:["rendered buffer [",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"llll"})}),"]"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var s=r(6540);const i={},l=s.createContext(i);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);