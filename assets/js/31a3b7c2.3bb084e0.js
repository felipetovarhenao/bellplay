"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9825],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var o=r(6540);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},9238:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"learning/tutorials/audiocontrol","title":"12. Audio Control","description":"This tutorial shows how to use buffers to control audio parameters.","source":"@site/docs/learning/tutorials/audiocontrol.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/audiocontrol","permalink":"/docs/learning/tutorials/audiocontrol","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"12. Audio Control"},"sidebar":"tutorialSidebar","previous":{"title":"11. Exporting","permalink":"/docs/learning/tutorials/export"},"next":{"title":"13. Inspecting Buffers","permalink":"/docs/learning/tutorials/bufferinspector"}}');var t=r(4848),a=r(8453);const i={sidebar_position:11,title:"12. Audio Control"},s="Audio Control",l={},u=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"audio-control",children:"Audio Control"})}),"\n",(0,t.jsx)(n.p,{children:"This tutorial shows how to use buffers to control audio parameters.\nIn this case, we use a buffer to control the frequency of an oscillator to achieve classic FM synthesis."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:'title="audio_control.bell" showLineNumbers',children:"## buffer duration\n$dur = 3000;\n## carrier frequency\n$carfq = 220;\n## harmonicity ratio\n$harmratio = 1.333;\n## modulation index as a equidistant linear envelope\n$modindex = 0 5 0;\n## modulator frequency\n$modfq = $carfq * $harmratio;\n## generate modulator oscillator buffer\n$mod = cycle(\n    @frequency $modfq @duration $dur\n);\n## apply audio processing to modulator buffer\n$mod = $mod.process(\n    ## multiply amplitude\n    multiply($modfq * $modindex) \n    ## apply offset to oscillate around carrier frequency\n    plus($carfq) \n);\n## generate carrier oscillator buffer\n$car = cycle(\n    ## use modulator buffer as frequency\n    @frequency $mod\n    ## we need to ensure carrier and modulator buffers match in duration\n    @duration $dur\n);\n## we only transcribe carrier buffer and render it\n$car.transcribe(@gain .125);\nrender(@play 1)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);