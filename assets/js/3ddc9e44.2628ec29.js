"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7331],{28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var r=a(96540);const i={},s=r.createContext(i);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(s.Provider,{value:n},e.children)}},33262:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"learning/tutorials/variables","title":"2. Variable Declarations","description":"When writing code, it\'s good practice to use descriptive variable names. For instance, noise to represent a noise signal, or saw for a sawtooth wave.","source":"@site/docs/learning/tutorials/variables.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/variables","permalink":"/docs/learning/tutorials/variables","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"render","permalink":"/docs/tags/render"},{"inline":true,"label":"saw","permalink":"/docs/tags/saw"},{"inline":true,"label":"transcribe","permalink":"/docs/tags/transcribe"}],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"2. Variable Declarations","tags":["render","saw","transcribe"]},"sidebar":"tutorialSidebar","previous":{"title":"1. Basic Workflow","permalink":"/docs/learning/tutorials/basicworkflow"},"next":{"title":"3. Importing Audio","permalink":"/docs/learning/tutorials/importingaudio"}}');var i=a(74848),s=a(28453);const t={sidebar_position:1,title:"2. Variable Declarations",tags:["render","saw","transcribe"]},l="Variable Declarations",o={},c=[];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"variable-declarations",children:"Variable Declarations"})}),"\n",(0,i.jsxs)(n.p,{children:["When writing code, it's good practice to use descriptive variable names. For instance, ",(0,i.jsx)(n.code,{children:"noise"})," to represent a noise signal, or ",(0,i.jsx)(n.code,{children:"saw"})," for a sawtooth wave.\nMost programming languages prevent the use of reserved keywords (e.g., ",(0,i.jsx)(n.code,{children:"for"}),", ",(0,i.jsx)(n.code,{children:"while"}),", ",(0,i.jsx)(n.code,{children:"null"}),") as variable names. The ",(0,i.jsx)(n.em,{children:"bell"})," language does this as well \u2014 using a reserved word like ",(0,i.jsx)(n.code,{children:"print"})," as a variable name will raise a parser error.\nHowever, this is ",(0,i.jsx)(n.strong,{children:"not"})," the case for functions and names defined in ",(0,i.jsx)(n.strong,{children:"bellplay~"}),". These are not treated as native ",(0,i.jsx)(n.em,{children:"bell"})," functions, so defining a variable with the same name (e.g., ",(0,i.jsx)(n.code,{children:"render"}),") will silently override the original value \u2014 without any warnings or errors."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Overwriting global ",(0,i.jsx)(n.strong,{children:"bellplay~"})," function names (such as ",(0,i.jsx)(n.code,{children:"render"}),", ",(0,i.jsx)(n.code,{children:"saw"}),", ",(0,i.jsx)(n.code,{children:"noise"}),", etc.) with your own global variables will ",(0,i.jsx)(n.strong,{children:"break"})," the application, often in ways that are hard to debug. There is no warning when this happens \u2014 the parser will accept the code, and the application will behave incorrectly."]})}),"\n",(0,i.jsxs)(n.p,{children:["To avoid such conflicts, always declare variables ",(0,i.jsx)(n.strong,{children:"locally"}),", using the ",(0,i.jsx)(n.code,{children:"$"})," prefix (e.g., ",(0,i.jsx)(n.code,{children:"$saw"}),"). Avoid global declarations unless absolutely necessary, and only after verifying that the name does not already exist in ",(0,i.jsx)(n.strong,{children:"bellplay~"}),".\nIf a name conflict does occur, restart the application to restore the original environment."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",metastring:'title="variable_declarations.bell" showLineNumbers',children:"## generate a buffer with the global function `saw` and store it in the local variable `$saw`\n$saw = saw(@frequency 220 @duration 1000);\n$saw.transcribe(@gain .15);\n## generate a second buffer with the global function `saw` and override the previous value of the `$saw` variable\n## note that since the `$saw` variable is local (prefixed with `$`), it does not override the global `saw` function.\n$saw = saw(@frequency 330 @duration 1000);\n$saw.transcribe(@gain .15);\n## render transcribed buffers\nrender()\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["By convention, global variables in ",(0,i.jsx)(n.em,{children:"bell"})," should be capitalized to distinguish them from local variables:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",metastring:"{1}",children:'MyGlobalVariable = "I\'m global!"; ## good\nmyglobalvariable = "I\'m dangerously global!"; ## not recommended\n$mylocalvariable = "I\'m local!"\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);