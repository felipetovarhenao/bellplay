"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7061],{6078:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"learning/tutorials/importingmidi","title":"22. Importing MIDI","description":"bellplay~ supports importing MIDI files (.mid or .midi) into our scripts, each described as a list of events.","source":"@site/docs/learning/tutorials/importingmidi.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/importingmidi","permalink":"/bellplay/docs/learning/tutorials/importingmidi","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":21,"frontMatter":{"sidebar_position":21,"title":"22. Importing MIDI"},"sidebar":"tutorialSidebar","previous":{"title":"21. Basic Sampling","permalink":"/bellplay/docs/learning/tutorials/sampling"},"next":{"title":"23. Feature-driven Sampling","permalink":"/bellplay/docs/learning/tutorials/kdtree"}}');var r=i(4848),s=i(8453);const o={sidebar_position:21,title:"22. Importing MIDI"},a="Importing MIDI",l={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"importing-midi",children:"Importing MIDI"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"bellplay~"})," supports importing MIDI files (",(0,r.jsx)(n.code,{children:".mid"})," or ",(0,r.jsx)(n.code,{children:".midi"}),") into our scripts, each described as a list of events.\nSimilar to ",(0,r.jsx)(n.strong,{children:"bellplay~"})," buffers, each MIDI event consists of a set of keys with relevant information about each event, including:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'pitch'"}),": pitch value in midicents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'duration'"}),": duration value in milliseconds."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'velocity'"}),": velocity value, in the range of 0 to 127."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'voice'"}),": voice number, as an integer."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'channel'"}),": MIDI channel, as an integer."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The code belows imports a MIDI file to render it as audio using a very basic guitar sampler."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",metastring:'title="importing_midi.bell" showLineNumbers',children:"## import MIDI file as a list of events\n$events = importmidi('satie.mid');\n## set maximum number of midi events (or comment out the line below this one to process midi file)\n$maxevents = 100;\n## get first n events, based on $maxevents\n$events = left($events, $maxevents);\n## iterate through MIDI events and create a buffer for each\nfor $event in $events do (\n    ## retrieve pitch, duration, onset, and velocity information of current event\n    $pitch = $event.getkey('pitch');\n    $dur = $event.getkey('duration');\n    $onset = $event.getkey('onset');\n    $vel = $event.getkey('velocity');\n    ## we divide velocity by 127 to normalize it to a 0-1 range and use it as linear gain\n    $gain = $vel / 127.;\n    ## generate a buffer with note info using **bellplay~** built-in sampler\n    ezsampler(\n        @pitch $pitch\n        @duration $dur\n        @velocity $vel\n    ).transcribe(\n        ## add a slight random onset deviation to \"humanize\" output\n        @onset $onset + rand(-10, 10) \n        @gain $gain\n        @pan rand() rand() \n    ) \n);\n## trigger rendering\nrender(\n    @play 1\n    ## apply post-render processing\n    @process (\n        ## apply reverse reverb\n        reverse() freeverb(\n            @roomsize .9\n            @wet .1\n            @tail 0\n        ) reverse() \n        ## normalize and apply 10 ms fade in\n        normalize(-12) fade(10, 0) \n    ) \n)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);