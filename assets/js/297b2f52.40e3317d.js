"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7034],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var a=n(96540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}},76981:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"learning/tutorials/buildcorpus","title":"18. Audio corpora with SQL tables","description":"This tutorial demonstrates how to create an in-memory, queryable corpus of audio buffers by leveraging the createdbtable and querydb functions.","source":"@site/docs/learning/tutorials/buildcorpus.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/buildcorpus","permalink":"/docs/learning/tutorials/buildcorpus","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyze","permalink":"/docs/tags/analyze"},{"inline":true,"label":"createdbtable","permalink":"/docs/tags/createdbtable"},{"inline":true,"label":"importaudio","permalink":"/docs/tags/importaudio"},{"inline":true,"label":"pitchmelodia","permalink":"/docs/tags/pitchmelodia"},{"inline":true,"label":"querydb","permalink":"/docs/tags/querydb"},{"inline":true,"label":"rand","permalink":"/docs/tags/rand"},{"inline":true,"label":"render","permalink":"/docs/tags/render"},{"inline":true,"label":"splitbuf","permalink":"/docs/tags/splitbuf"},{"inline":true,"label":"transcribe","permalink":"/docs/tags/transcribe"}],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17,"title":"18. Audio corpora with SQL tables","tags":["analyze","createdbtable","importaudio","pitchmelodia","querydb","rand","render","splitbuf","transcribe"]},"sidebar":"tutorialSidebar","previous":{"title":"17. More Audio Features","permalink":"/docs/learning/tutorials/features"},"next":{"title":"19. Caching Data","permalink":"/docs/learning/tutorials/caching"}}');var i=n(74848),r=n(28453);const s={sidebar_position:17,title:"18. Audio corpora with SQL tables",tags:["analyze","createdbtable","importaudio","pitchmelodia","querydb","rand","render","splitbuf","transcribe"]},l="Audio corpora with SQL tables",o={},c=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"audio-corpora-with-sql-tables",children:"Audio corpora with SQL tables"})}),"\n",(0,i.jsxs)(t.p,{children:["This tutorial demonstrates how to create an in-memory, queryable corpus of audio buffers by leveraging the ",(0,i.jsx)(t.code,{children:"createdbtable"})," and ",(0,i.jsx)(t.code,{children:"querydb"})," functions.\nThese functions allow you to structure and filter lllls using ",(0,i.jsx)(t.a,{href:"https://www.sqlitetutorial.net/",children:"SQLite3"})," queries based on specific keys."]}),"\n",(0,i.jsxs)(t.p,{children:["We begin by importing an audio file and splitting it into short fixed-length segments. Each segment is then analyzed using the ",(0,i.jsx)(t.code,{children:"pitchmelodia"})," descriptor, which provides an estimation of predominant melody pitch and associated confidence values.\nThe results of this analysis are assembled into a structured table using ",(0,i.jsx)(t.code,{children:"createdbtable"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Each element in the input data passed to ",(0,i.jsx)(t.code,{children:"createdbtable"})," should be structured as a list of key-value pairs, where each key corresponds to a column name in the resulting table and each value is the corresponding data entry.\nFor example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bell",metastring:'title="expected structure for each data item"',children:"[\n    [ <key_1> <value_1> ]\n    [ <key_2> <value_2> ]\n    ...\n    [ <key_N> <value_N> ]\n]\n"})}),"\n",(0,i.jsx)(t.p,{children:"This format ensures that the resulting table can be queried using standard SQL-style syntax, with each key becoming a column in the table schema."}),"\n",(0,i.jsxs)(t.p,{children:["Once the table is created, we can query it using ",(0,i.jsx)(t.code,{children:"querydb"}),", selecting only segments that meet certain criteria\u2014here, those with a pitch confidence greater than ",(0,i.jsx)(t.code,{children:"0.01"}),"\u2014and ordering them by ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Pitch_class",children:"pitch class"})," (pitch modulo 1200)."]}),"\n",(0,i.jsx)(t.p,{children:"Finally, the selected segments are rendered back as symbolic notes, placed at regular temporal intervals and randomized in the stereo field."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bell",metastring:'title="audio_corpora_with_sql_tables.bell" showLineNumbers',children:"## Import an audio file into a buffer\n$buffer = importaudio('trumpet.wav');\n## Split the buffer into fixed-length segments of 100 ms\n$segments = $buffer.splitbuf(@split 100);\n## Analyze each segment with the 'pitchmelodia' descriptor and collect the results\n$corpus = for $seg in $segments collect $seg.analyze(pitchmelodia());\n## Create an in-memory SQL table named 'corpus' from the analysis results\ncreatedbtable(\n    @data $corpus @name 'corpus' \n);\n## Query the table to select segments with high pitch confidence,\n## ordered by pitch class (pitch modulo 1200)\n$results = querydb('SELECT * FROM corpus WHERE pitchmelodia_confidence > 0.01 ORDER BY (pitchmelodia % 1200)');\n## Initialize onset time for transcription\n$onset = 0;\n## Transcribe each selected segment with symbolic pitch and random panning\nfor $seg in $results do (\n    $seg.transcribe(\n        @onset $onset\n        @pitchkey 'pitchmelodia' \n        @pan rand() \n    );\n    $onset += 50\n    ## Increment onset time for next segment\n    \n);\n## Trigger rendering\nrender(@play 1)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);