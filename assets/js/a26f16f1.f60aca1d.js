"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[3708],{1027:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"learning/tutorials/bufferprocessing","title":"9. Buffer Processing","description":"One of the core features of bellplay~ is the ability to dynamically and flexibly apply chains of DSP algorithms to our buffers.","source":"@site/docs/learning/tutorials/bufferprocessing.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/bufferprocessing","permalink":"/bellplay/docs/learning/tutorials/bufferprocessing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"9. Buffer Processing"},"sidebar":"tutorialSidebar","previous":{"title":"8. Automation","permalink":"/bellplay/docs/learning/tutorials/automation"},"next":{"title":"10. Post-rendering Processing","permalink":"/bellplay/docs/learning/tutorials/postprocessing"}}');var s=r(4848),o=r(8453);const i={sidebar_position:8,title:"9. Buffer Processing"},a="Buffer Processing",l={},c=[];function f(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"buffer-processing",children:"Buffer Processing"})}),"\n",(0,s.jsxs)(n.p,{children:["One of the core features of ",(0,s.jsx)(n.strong,{children:"bellplay~"})," is the ability to dynamically and flexibly apply chains of DSP algorithms to our buffers.\nThis tutorial shows a very basic example of this by applying reverse delay to an audio file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",metastring:'title="buffer_processing.bell" showLineNumbers',children:"## path to built-in audio file\n$path = 'drums.wav';\n## uncomment the line below\ud83d\udc47 to use a file path of your choosing\n## $path = \"/path/to/my/file.wav\";\n## use file path to import audio file as a buffer\n$buff = importaudio($path);\n## apply processing to buffer. Notice that we need re-assign the variable\xa0\u2014 operations in bell are not destructive/do not happen in-place.\n$buff = $buff.process(\n    ## reverse buffer\n    reverse() \n    ## apply reverb\n    freeverb(@tail 500) \n    ## reverse again\n    reverse() \n);\n## transcribe and render\n$buff.transcribe(@gain .125);\nrender(@play 1)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);