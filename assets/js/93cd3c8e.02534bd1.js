"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[2213],{26863:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"reference/buffer-operations/clip","title":"clip","description":"clip","source":"@site/docs/reference/buffer-operations/clip.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/clip","permalink":"/docs/reference/buffer-operations/clip","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"overdrive","permalink":"/docs/tags/overdrive"},{"inline":true,"label":"process","permalink":"/docs/tags/process"}],"version":"current","frontMatter":{"hide_title":true,"tags":["inspect","overdrive","process"]},"sidebar":"tutorialSidebar","previous":{"title":"biquad","permalink":"/docs/reference/buffer-operations/biquad"},"next":{"title":"crop","permalink":"/docs/reference/buffer-operations/crop"}}');var i=r(74848),t=r(28453);const l={hide_title:!0,tags:["inspect","overdrive","process"]},o=void 0,c={},p=[{value:"<code>clip</code>",id:"clip",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"clip",children:(0,i.jsx)(n.code,{children:"clip"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",children:"clip(\n    @threshold 1\n) -> llll\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generates an audio process operation for applying hard-clip distortion to a buffer."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@threshold"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int/float/llll"})}),"]: distortion amplitude threshold, either as single number or envelope. (",(0,i.jsx)(n.em,{children:"default"}),": ",(0,i.jsx)(n.code,{children:"1"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,i.jsxs)(n.p,{children:["clip operation [",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"clip"})," is meant to be used with the ",(0,i.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = clip(0.05); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after clip process')\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(96540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);