"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[6425],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var t=r(96540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},82051:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"reference/data-utilities/seq2markov","title":"seq2markov","description":"seq2markov","source":"@site/docs/reference/data-utilities/seq2markov.md","sourceDirName":"reference/data-utilities","slug":"/reference/data-utilities/seq2markov","permalink":"/docs/reference/data-utilities/seq2markov","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"scramble","permalink":"/docs/reference/data-utilities/scramble"},"next":{"title":"setkey","permalink":"/docs/reference/data-utilities/setkey"}}');var s=r(74848),i=r(28453);const l={hide_title:!0},c=void 0,o={},a=[{value:"<code>seq2markov</code>",id:"seq2markov",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"seq2markov",children:(0,s.jsx)(n.code,{children:"seq2markov"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",children:"seq2markov(\n    @sequence ? ## llll (required)\n    @order 1\n    @prepad '^'\n    @postpad '$'\n) -> llll\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Constructs a Markov chain from a given sequence of data. See ",(0,s.jsx)(n.code,{children:"markov2seq"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@sequence ?"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"llll"})}),"]: input sequence from which the Markov model will be built. (",(0,s.jsx)(n.em,{children:"required"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@order"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: order of the Markov chain, determining the length of history considered for state transitions. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"1"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@prepad"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"symbol"})}),"]: padding symbol used at the beginning of the sequence to handle initial states. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"'^'"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@postpad"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"symbol"})}),"]: padding symbol used at the end of the sequence to handle final states (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"'$'"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["transition probability matrix in sparse form [",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$events = importaudio('bach.wav'); ## import MIDI file\n## get pitch from each event\n$pitches = for $e in $events collect $e.getkey('pitch');\n## build 2nd-order Markov model from pitch sequence\n$matrix = seq2markov(@sequence $pitches @order 2);\n## generate pitch sequence of size 50 from Markov model\n$pitchseq = markov2seq(@matrix $matrix @maxlength 50);\n$t = 0;\n## Transcribe pitches\nfor $pitch in $pitchseq do (\n    ezsampler(@pitch $pitch).transcribe($t);\n    $t += 120\n);\nrender(@play 1)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);