"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[5771],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},8673:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"learning/tutorials/basicworkflow","title":"1. Basic Workflow","description":"The general workflow of a bell script in bellplay~ is the following:","source":"@site/docs/learning/tutorials/basicworkflow.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/basicworkflow","permalink":"/docs/learning/tutorials/basicworkflow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"1. Basic Workflow"},"sidebar":"tutorialSidebar","previous":{"title":"Tutorials","permalink":"/docs/category/tutorials"},"next":{"title":"2. Variable Declarations","permalink":"/docs/learning/tutorials/variables"}}');var t=r(4848),i=r(8453);const o={sidebar_position:0,title:"1. Basic Workflow"},l="Basic Workflow",a={},c=[];function d(e){const n={code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"basic-workflow",children:"Basic Workflow"})}),"\n",(0,t.jsxs)(n.p,{children:["The general workflow of a bell script in ",(0,t.jsx)(n.strong,{children:"bellplay~"})," is the following:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generation"}),": buffers are created using synthesis or sampling techniques, and optionally analyzed/processed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transcription"}),": buffers are queued for rendering, each symbolically represented as a note in staff notation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rendering"}),": All transcribed buffers are compiled and rendered into a single audio buffer. This buffer can then be used for subsequent iterations of this workflow to refine the final output as needed."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Below is an introductory example of a ",(0,t.jsx)(n.em,{children:"bell"})," script in ",(0,t.jsx)(n.strong,{children:"bellplay~"}),", which generates a short sinusoidal wave at 440 Hz:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:'title="basic_workflow.bell" showLineNumbers',children:"## first, let's generate buffer, in this case a sinusoidal oscillator.\n$osc = cycle();\n## then we transcribe the buffer for rendering\n$osc.transcribe();\n## finally, we render transcribed buffer\nrender()\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);