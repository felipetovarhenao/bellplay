"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7659],{5256:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/utilities/derive","title":"derive","description":"derive","source":"@site/docs/reference/utilities/derive.md","sourceDirName":"reference/utilities","slug":"/reference/utilities/derive","permalink":"/bellplay/docs/reference/utilities/derive","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"dbtoa","permalink":"/bellplay/docs/reference/utilities/dbtoa"},"next":{"title":"dr2r","permalink":"/bellplay/docs/reference/utilities/dr2r"}}');var t=i(4848),l=i(8453);const s={hide_title:!0},d=void 0,o={},c=[{value:"<code>derive</code>",id:"derive",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"derive",children:(0,t.jsx)(n.code,{children:"derive"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",children:"derive(\n    @llll ?  ## llll (required)\n    @numsamples 100\n    @order 1\n    @origin 0\n    @pad 2\n) -> llll\n"})}),"\n",(0,t.jsx)(n.p,{children:"Computes the derivative of a breakpoint function. Note that the slope of the derived break-point function is always 0, since the output function is always piecewise linear."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@llll ?"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"llll"})}),"]: list of integers. (",(0,t.jsx)(n.em,{children:"required"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@numsamples"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int"})}),"]: number of samples."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@order"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/list"})}),"]: order of the integration, i.e. the number of times the integration should be subsequently performed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@origin"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: initial value of the integral function. If the order of the integration is greater than one, one origin for each different integration step can be defined."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@pad"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int"})}),"]: padding mode.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"0"}),": no pad"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"1"}),": pad at left"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"2"}),": pad at right"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"3"}),": pad at left and right"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output"})}),"\n",(0,t.jsxs)(n.p,{children:["Integrated breakpoint function. [",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"llll"})}),"]"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var r=i(6540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);