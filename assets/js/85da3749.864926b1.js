"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[2472],{4330:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"reference/utilities/pitchdiff","title":"pitchdiff","description":"pitchdiff","source":"@site/docs/reference/utilities/pitchdiff.md","sourceDirName":"reference/utilities","slug":"/reference/utilities/pitchdiff","permalink":"/bellplay/docs/reference/utilities/pitchdiff","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"pcdiff","permalink":"/bellplay/docs/reference/utilities/pcdiff"},"next":{"title":"query","permalink":"/bellplay/docs/reference/utilities/query"}}');var r=i(4848),s=i(8453);const c={hide_title:!0},l=void 0,d={},o=[{value:"<code>pitchdiff</code>",id:"pitchdiff",level:2}];function f(e){const t={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"pitchdiff",children:(0,r.jsx)(t.code,{children:"pitchdiff"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bell",children:"pitchdiff(\n    @source ?  ## int/float (required)\n    @targets ?  ## int/float/list (required)\n) -> int/float\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a list of target midicents and/or pitch classes, returns the signed difference between a pitch in midicents and the nearest midicent/pitch class target."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@source ?"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"int/float"})}),"]: reference pitch in midicents. (",(0,r.jsx)(t.em,{children:"required"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"@targets ?"})," [",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"int/float/list"})}),"]: list of midicent or pitch class targets. (",(0,r.jsx)(t.em,{children:"required"}),")"]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Output"})}),"\n",(0,r.jsxs)(t.p,{children:["signed difference to closest target, in cents. [",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.em,{children:"int/float"})}),"]"]})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>l});var n=i(6540);const r={},s=n.createContext(r);function c(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);