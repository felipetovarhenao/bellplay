"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7331],{3262:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learning/tutorials/variables","title":"2. Variable Declarations","description":"When writing code, it\'s often good practice to use descriptive names for our variables.","source":"@site/docs/learning/tutorials/variables.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/variables","permalink":"/bellplay/docs/learning/tutorials/variables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"2. Variable Declarations"},"sidebar":"tutorialSidebar","previous":{"title":"1. Basic Workflow","permalink":"/bellplay/docs/learning/tutorials/basicworkflow"},"next":{"title":"3. Importing Audio","permalink":"/bellplay/docs/learning/tutorials/importingaudio"}}');var s=n(4848),t=n(8453);const l={sidebar_position:1,title:"2. Variable Declarations"},r="Variable Declarations",o={},c=[];function d(e){const a={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"variable-declarations",children:"Variable Declarations"})}),"\n",(0,s.jsxs)(a.p,{children:["When writing code, it's often good practice to use descriptive names for our variables.\nFor instance, it makes sense to name a variable ",(0,s.jsx)(a.code,{children:"noise"})," to represent a noise signal, or ",(0,s.jsx)(a.code,{children:"saw"})," to represent a sawtooth wave, etc."]}),"\n",(0,s.jsxs)(a.p,{children:["Typically, when a variable name is a reserved or protected keyword in a programming language (e.g., ",(0,s.jsx)(a.code,{children:"for"}),", ",(0,s.jsx)(a.code,{children:"while"}),", ",(0,s.jsx)(a.code,{children:"null"}),", etc.), the parser will let us know that those keywords cannot be used as variable names.\nThis is also the case in ",(0,s.jsx)(a.em,{children:"bell"})," \u2014 trying to use, say, ",(0,s.jsx)(a.code,{children:"print"})," as a variable name is not allowed, because it is already a native function in ",(0,s.jsx)(a.em,{children:"bell"}),".\nHowever, this doesn't happen when using variables with the same name as those included in ",(0,s.jsx)(a.strong,{children:"bellplay~"}),", because they are not native ",(0,s.jsx)(a.em,{children:"bell"})," functions.\nThis means that a ",(0,s.jsx)(a.strong,{children:"bellplay~"})," function, like ",(0,s.jsx)(a.code,{children:"render"}),', would be silently overwritten if you create a variable with that name, and the parser wouldn\'t care to tell you.\nThis makes it extremely easy for us to accidentally "break" the application, unless we follow some best practices.']}),"\n",(0,s.jsxs)(a.p,{children:["That is why, in ",(0,s.jsx)(a.strong,{children:"bellplay~"}),", variable declarations should always be local (i.e., ",(0,s.jsx)(a.code,{children:"$<varname>"}),"), instead of global (",(0,s.jsx)(a.code,{children:"<varname>"})," or ",(0,s.jsx)(a.code,{children:"<Varname>"}),") to prevent namespacing collisions.\nIn other words, you should only use global declarations (without the ",(0,s.jsx)(a.code,{children:"$"})," prefix) when absolutely necessary, and make sure your variable name does not already exist in ",(0,s.jsx)(a.strong,{children:"bellplay~"}),".\nIf you accidentally use a global variable that already exists in ",(0,s.jsx)(a.strong,{children:"bellplay~"}),", simply restart the application to restore the values."]}),"\n",(0,s.jsxs)(a.admonition,{type:"tip",children:[(0,s.jsxs)(a.p,{children:["In ",(0,s.jsx)(a.em,{children:"bell"}),", the suggested convention is to capitalize global variables, like so:"]}),(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bell",metastring:"{1}",children:'MyGlobalVariable = "I\'m global!";\n$mylocalvariable = "I\'m local!"\n'})})]}),"\n",(0,s.jsx)(a.p,{children:"The code below illustrates how using local variables does not result in any namespace collisions."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bell",metastring:'title="variable_declarations.bell" showLineNumbers',children:"## generate a buffer with the global function `saw` and store it in the local variable `$saw`\n$saw = saw(@frequency 220 @duration 1000);\n$saw.transcribe(@gain .15);\n## generate a second buffer with the global function `saw` and override the previous value of the `$saw` variable\n## note that since the `$saw` variable is local (prefixed with `$`), it does not override the global `saw` function.\n$saw = saw(@frequency 330 @duration 1000);\n$saw.transcribe(@gain .15);\n## render transcribed buffers\nrender()\n"})})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>r});var i=n(6540);const s={},t=i.createContext(s);function l(e){const a=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:a},e.children)}}}]);