"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[1392],{974:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>a,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"reference/buffer-analysis/mfcc","title":"mfcc","description":"mfcc","source":"@site/docs/reference/buffer-analysis/mfcc.md","sourceDirName":"reference/buffer-analysis","slug":"/reference/buffer-analysis/mfcc","permalink":"/docs/reference/buffer-analysis/mfcc","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"maxmagfreq","permalink":"/docs/reference/buffer-analysis/maxmagfreq"},"next":{"title":"onsetdetection","permalink":"/docs/reference/buffer-analysis/onsetdetection"}}');var r=i(4848),l=i(8453);const c={hide_title:!0},d=void 0,t={},o=[{value:"<code>mfcc</code>",id:"mfcc",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"mfcc",children:(0,r.jsx)(n.code,{children:"mfcc"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"mfcc(\n    @dcttype 2\n    @highfrequencybound 11000\n    @inputsize 1025\n    @liftering 0\n    @logtype 'dbamp'\n    @lowfrequencybound 0\n    @normalize 'unit_sum'\n    @numberbands 40\n    @numbercoefficients 13\n    @samplerate 44100\n    @silencethreshold 0.0000\n    @type 'power'\n    @warpingformula 'htkmel'\n    @weighting 'warping'\n    @mode 0\n) -> llll\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Generates audio descriptor to compute the mel-frequency cepstrum coefficients of a buffer's spectrum. As there is no standard implementation, the MFCC-FB40 is used by default. See ",(0,r.jsx)(n.code,{children:"analyze"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The resulting buffer will be updated with the following keys:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"mfcc_bands"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"mfcc"})}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mfcc"})," is a mirror implementation of the same algorithm in the ",(0,r.jsx)(n.a,{href:"https://essentia.upf.edu/",children:"Essentia"})," library.\nFor more details on the algorithm, please check the ",(0,r.jsx)(n.a,{href:"https://essentia.upf.edu/algorithms_reference.html",children:"Essentia Algorithms reference"}),"."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@dcttype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: DCT type. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"2"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@highfrequencybound"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: upper bound of the frequency range, in Hz. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"11000"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@inputsize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: size of input spectrum. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1025"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@liftering"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: liftering coefficient. Use ",(0,r.jsx)(n.code,{children:"0"})," to bypass it. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@logtype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: logarithmic compression type. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'dbamp'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'natural'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'dbpow'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'dbamp'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'log'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@lowfrequencybound"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"float"})}),"]: lower bound of the frequency range, in Hz. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@normalize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: spectrum bin weights to use for each mel band. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'unit_sum'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'unit_sum'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'unit_tri'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'unit_max'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@numberbands"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of mel-bands in the filter. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"40"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@numbercoefficients"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of output mel coefficients. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"13"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@samplerate"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: sampling rate of the audio signal, in Hz. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"44100"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@silencethreshold"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: silence threshold for computing log-energy bands. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0.0000"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@type"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: use magnitude or power spectrum. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'power'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'magnitude'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'power'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@warpingformula"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: scale implementation type. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'htkmel'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'slaneymel'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'htkmel'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@weighting"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"symbol"})}),"]: type of weighting function for determining triangle area. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"'warping'"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'warping'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'linear'"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@mode"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: analysis mode. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": global"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": time series"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": time-tagged time series"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": buffer"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(n.p,{children:["mfcc descriptor [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mfcc"})," is meant to be used with the ",(0,r.jsx)(n.code,{children:"analyze"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$descr = mfcc(); ## generate mfcc audio descriptor\n$buffer.inspect('before analysis');\n$buffer = $buffer.analyze($descr); ## apply analysis\n$buffer.inspect('after analysis')\n"})})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>d});var s=i(6540);const r={},l=s.createContext(r);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);