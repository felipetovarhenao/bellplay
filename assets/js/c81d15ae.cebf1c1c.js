"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9293],{28453:(e,n,l)=>{l.d(n,{R:()=>c,x:()=>t});var i=l(96540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},54108:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"reference/buffer-operations/multiply","title":"multiply","description":"multiply","source":"@site/docs/reference/buffer-operations/multiply.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/multiply","permalink":"/docs/reference/buffer-operations/multiply","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"process","permalink":"/docs/tags/process"}],"version":"current","frontMatter":{"hide_title":true,"tags":["inspect","process"]},"sidebar":"tutorialSidebar","previous":{"title":"mixdown","permalink":"/docs/reference/buffer-operations/mixdown"},"next":{"title":"normalize","permalink":"/docs/reference/buffer-operations/normalize"}}');var s=l(74848),r=l(28453);const c={hide_title:!0,tags:["inspect","process"]},t=void 0,d={},o=[{value:"<code>multiply</code>",id:"multiply",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"multiply",children:(0,s.jsx)(n.code,{children:"multiply"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",children:"multiply(\n    @operand ? ## int/float/llll (required)\n    @resamplingfiltersize 11\n    @resamplingmode 'sinc'\n    @resamplingpolicy 3\n    @envtimeunit 2\n) -> llll\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates an audio process operation for performing multiplication on a buffer."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@operand ?"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int/float/llll"})}),"]: value to multiply buffer by either as a single number, envelope, or buffer. (",(0,s.jsx)(n.em,{children:"required"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@resamplingfiltersize"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: resampling filter size. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"11"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@resamplingmode"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"symbol"})}),"]: resampling mode. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"'sinc'"}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'sinc'"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'nearest neighbor'"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'sample and hold'"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'linear'"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'quad'"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"'cubic'"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@resamplingpolicy"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: resampling policy. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"3"}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0"}),": don't"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1"}),": to lowest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2"}),": to highest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"3"}),": to most common"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"4"}),": to max. current"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@envtimeunit"})," [",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"int"})}),"]: envelope time unit. (",(0,s.jsx)(n.em,{children:"default"}),": ",(0,s.jsx)(n.code,{children:"2"}),").","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0"}),": milliseconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1"}),": samples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2"}),": duration ratio"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"3"}),": milliseconds difference"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"4"}),": samples difference"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["multiply operation [",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"multiply"})," is meant to be used with the ",(0,s.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = multiply(); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after multiply process')\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);