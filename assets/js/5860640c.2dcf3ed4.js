"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9207],{4723:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/buffer-operations/waveshape","title":"waveshape","description":"waveshape","source":"@site/docs/reference/buffer-operations/waveshape.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/waveshape","permalink":"/docs/reference/buffer-operations/waveshape","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"wavesetshuffle","permalink":"/docs/reference/buffer-operations/wavesetshuffle"},"next":{"title":"window","permalink":"/docs/reference/buffer-operations/window"}}');var t=s(4848),o=s(8453);const a={hide_title:!0},i=void 0,l={},c=[{value:"<code>waveshape</code>",id:"waveshape",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"waveshape",children:(0,t.jsx)(n.code,{children:"waveshape"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",children:"waveshape(\n    @phase -1 1\n    @duration 1000\n) -> llll\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates audio process operation for waveshaping a buffer. See ",(0,t.jsx)(n.code,{children:"process"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@phase"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: buffer phase envelope between -1 and 1, either as an envelope or a buffer. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"-1 1"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@duration"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int"})}),"]: envelope duration in milliseconds. Ignored if ",(0,t.jsx)(n.code,{children:"@phase"})," is a buffer. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"1000"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,t.jsxs)(n.p,{children:["waveshape operation [",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"waveshape"})," is meant to be used with the ",(0,t.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = waveshape(); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after waveshape process')\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);