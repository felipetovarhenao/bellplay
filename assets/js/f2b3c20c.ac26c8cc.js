"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[6478],{2916:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"reference/buffer-operations/timesquash","title":"timesquash","description":"timesquash","source":"@site/docs/reference/buffer-operations/timesquash.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/timesquash","permalink":"/docs/reference/buffer-operations/timesquash","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"teeth","permalink":"/docs/reference/buffer-operations/teeth"},"next":{"title":"todiffs","permalink":"/docs/reference/buffer-operations/todiffs"}}');var r=i(4848),l=i(8453);const c={hide_title:!0},d=void 0,o={},h=[{value:"<code>timesquash</code>",id:"timesquash",level:2}];function t(e){const n={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"timesquash",children:(0,r.jsx)(n.code,{children:"timesquash"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"timesquash(\n    @duration 1\n    @timeunit 2\n    @timeblock 4096\n    @mode 1\n    @xfade 4096\n    @xfadecurve 0\n    @xfadetype 1\n    @glbleed 4\n    @glnumiter 10\n    @glrandomize 0\n    @glrect 1\n    @batchsize 1\n    @batchinterrupt 0\n    @energy 2\n    @forwardenergy 1\n    @forwardenergyembed 1\n    @forwardenergytype 1\n    @framesize 2048\n    @hopsize 1024\n    @phasehandling 2\n    @regularization 0.0100\n    @wintype 'sqrthann' 'sqrthann'\n) -> llll\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Audio process operation for applying timesquash time compression to a buffer. This removes time from a sample by shifting portions of the spectrogram while preserving the relevant content. See ",(0,r.jsx)(n.code,{children:"process"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This operation can be applied to a buffer, via the ",(0,r.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"$op = timesquash();\n$buffer = $buffer.process($op)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@duration"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: target duration, based on ",(0,r.jsx)(n.code,{children:"@timeunit"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@timeunit"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: time unit for ",(0,r.jsx)(n.code,{children:"@duration"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": milliseconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": duration ratio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": milliseconds difference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": samples difference"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@timeblock"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: duration of each time block to be removed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@mode"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: working mode.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": frequency domain"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": time domain"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@xfade"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: duration of the crossfade, in samples."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@xfadecurve"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: curve parameter for the crossfade."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@xfadetype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: cross fade type.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": linear"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": sine"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": curve"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": s-curve"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@glbleed"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of frames of invalidation for the Griffin-Lim algorithm, when ",(0,r.jsx)(n.code,{children:"@phasehandling"})," is ",(0,r.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@glnumiter"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of Griffin-Lim iterations, when ",(0,r.jsx)(n.code,{children:"@phasehandling"})," is ",(0,r.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@glrandomize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: randomize the phases of the regions subject to the Griffin-Lim algorithm, when ",(0,r.jsx)(n.code,{children:"@phasehandling"})," is ",(0,r.jsx)(n.code,{children:"2"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@glrect"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: invalidate whole rectangular regions whose phases are recomputed via the Griffin-Lim algorithm, when ",(0,r.jsx)(n.code,{children:"@phasehandling"})," is ",(0,r.jsx)(n.code,{children:"2"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@batchsize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of seams processed in batch."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@batchinterrupt"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: interrupt batch when crossing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@energy"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: energy function used for computing seams.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": magnitude"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": gradient magnitude"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": Sobel"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@forwardenergy"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: amount of forward energy contribution."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@forwardenergyembed"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: embed forward energy in cumulative matrix.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@forwardenergytype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: forward energy type.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": gradient L1 norm"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": energy L2 norm"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@framesize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: window size, in samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@hopsize"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: hop size, in samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@phasehandling"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: phase handling mode.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": keep"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": compensate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": Griffin-Lim"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@regularization"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: how much energy of a bin smears on the ones above and below, between 0 and 1."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@wintype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"list/symbol"})}),"]: window type.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'rectangular'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'triangular'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'sine'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'hann'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'hamming'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'blackman'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'nuttall'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'blackmannuttall'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'blackmanharris'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'gaussian'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'sqrthann'"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"'sqrthamming'"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output"})}),"\n",(0,r.jsxs)(n.p,{children:["timesquash operation [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>d});var s=i(6540);const r={},l=s.createContext(r);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);