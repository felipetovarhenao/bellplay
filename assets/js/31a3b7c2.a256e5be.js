"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[9825],{28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(96540);const a={},o=t.createContext(a);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:r},e.children)}},79238:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"learning/tutorials/audiocontrol","title":"13. Buffer-based Parameters","description":"This tutorial shows how to use buffers to control audio parameters.","source":"@site/docs/learning/tutorials/audiocontrol.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/audiocontrol","permalink":"/docs/learning/tutorials/audiocontrol","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"cycle","permalink":"/docs/tags/cycle"},{"inline":true,"label":"multiply","permalink":"/docs/tags/multiply"},{"inline":true,"label":"plus","permalink":"/docs/tags/plus"},{"inline":true,"label":"process","permalink":"/docs/tags/process"},{"inline":true,"label":"render","permalink":"/docs/tags/render"},{"inline":true,"label":"transcribe","permalink":"/docs/tags/transcribe"}],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12,"title":"13. Buffer-based Parameters","tags":["cycle","multiply","plus","process","render","transcribe"]},"sidebar":"tutorialSidebar","previous":{"title":"12. Exporting","permalink":"/docs/learning/tutorials/export"},"next":{"title":"14. Inspecting Buffers","permalink":"/docs/learning/tutorials/bufferinspector"}}');var a=n(74848),o=n(28453);const s={sidebar_position:12,title:"13. Buffer-based Parameters",tags:["cycle","multiply","plus","process","render","transcribe"]},i="Buffer-based Parameters",l={},c=[];function u(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"buffer-based-parameters",children:"Buffer-based Parameters"})}),"\n",(0,a.jsx)(r.p,{children:"This tutorial shows how to use buffers to control audio parameters.\nIn this case, we use a buffer to control the frequency of an oscillator to achieve classic FM synthesis."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bell",metastring:'title="buffer-based_parameters.bell" showLineNumbers',children:"## buffer duration\n$dur = 3000;\n## carrier frequency\n$carfq = 220;\n## harmonicity ratio\n$harmratio = 1.333;\n## modulation index as a equidistant linear envelope\n$modindex = 0 5 0;\n## modulator frequency\n$modfq = $carfq * $harmratio;\n## generate modulator oscillator buffer\n$mod = cycle(\n    @frequency $modfq @duration $dur\n);\n## apply audio processing to modulator buffer\n$mod = $mod.process(\n    ## multiply amplitude\n    multiply($modfq * $modindex) \n    ## apply offset to oscillate around carrier frequency\n    plus($carfq) \n);\n## generate carrier oscillator buffer\n$car = cycle(\n    ## use modulator buffer as frequency\n    @frequency $mod\n    ## we need to ensure carrier and modulator buffers match in duration\n    @duration $dur\n);\n## we only transcribe carrier buffer and render it\n$car.transcribe(@gain .125);\nrender(@play 1)\n"})})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);