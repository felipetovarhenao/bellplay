"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[463],{4479:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/audio-generation/ezsampler","title":"ezsampler","description":"ezsampler","source":"@site/docs/reference/audio-generation/ezsampler.md","sourceDirName":"reference/audio-generation","slug":"/reference/audio-generation/ezsampler","permalink":"/bellplay/docs/reference/audio-generation/ezsampler","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"envelope","permalink":"/bellplay/docs/reference/audio-generation/envelope"},"next":{"title":"importaudio","permalink":"/bellplay/docs/reference/audio-generation/importaudio"}}');var r=i(4848),l=i(8453);const t={hide_title:!0},o=void 0,c={},a=[{value:"<code>ezsampler</code>",id:"ezsampler",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"ezsampler",children:(0,r.jsx)(n.code,{children:"ezsampler"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"ezsampler(\n    @pitch 6000\n    @duration 2000\n    @velocity 64\n    @keymap null\n    @resample 1\n    @useseed 0\n    @usecache 1\n) -> llll\n"})}),"\n",(0,r.jsx)(n.p,{children:"Generates a buffer given pitch, duration, and velocity values, and an optional list representing a sampler key map. The key map must be a list of key-value pairs, where the each key is a numeric pitch value, in midicents, that maps to one or more audio file paths corresponding to that pitch, or to a list of key-value pairs with velocity values, between 0 and 127, as keys, and audio file paths as values. When multiple file paths are provided for a given pitch or velocity key, one of them is chosen at random. If no keymap is provided, the function defaults to a basic, built-in key map. The generated buffer will be one that best approximates the specified pitch, duration, and velocity values."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@pitch"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: target pitch in midicents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@duration"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: target duration in milliseconds. Set to null to get the sample's max. duration."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@velocity"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: target velocity, from 0 to 127. Used only when keymap has velocity-based options."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@keymap"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"llll"})}),"]: key mapping, with pitch in midicents as key and file path as value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@resample"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: resample buffer to match target pitch.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@useseed"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: use seed-based random selection function.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@usecache"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: use buffer cache to optimize memory usage.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output"})}),"\n",(0,r.jsxs)(n.p,{children:["buffer [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);