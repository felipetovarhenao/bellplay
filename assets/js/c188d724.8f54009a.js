"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[154],{6608:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"reference/buffer-operations/retune","title":"retune","description":"retune","source":"@site/docs/reference/buffer-operations/retune.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/retune","permalink":"/docs/reference/buffer-operations/retune","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"resample","permalink":"/docs/reference/buffer-operations/resample"},"next":{"title":"reverse","permalink":"/docs/reference/buffer-operations/reverse"}}');var t=r(4848),i=r(8453);const c={hide_title:!0},l=void 0,o={},d=[{value:"<code>retune</code>",id:"retune",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function h(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"retune",children:(0,t.jsx)(n.code,{children:"retune"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",children:"retune(\n    @pitchgrid 0\n    @threshold 0\n    @ambiencethreshold 0.3000\n    @amount 100\n    @bypass 100\n    @quality 'basic'\n) -> llll\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Audio process operation for applying autotune-like pitch retuning to a buffer. See ",(0,t.jsx)(n.code,{children:"process"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@pitchgrid"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float/list"})}),"]: pitch grid to retune to, as a list of pitch classes. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@threshold"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: correction threshold. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@ambiencethreshold"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: correction ambience threshold, between -10 and 10. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"0.3000"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@amount"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: pitch correction amount. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"100"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@bypass"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"int/float"})}),"]: pitch correction auto-bypass threshold, at which signal passes unaffected. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"100"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@quality"})," [",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"symbol"})}),"]: pitch correction quality. (",(0,t.jsx)(n.em,{children:"default"}),": ",(0,t.jsx)(n.code,{children:"'basic'"}),").","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"'basic'"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"'good'"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"'better'"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"'best'"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,t.jsxs)(n.p,{children:["retune operation [",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"retune"})," is meant to be used with the ",(0,t.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = retune(); ## processing operation\n$buffer.inspect('before process');\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after process')\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);