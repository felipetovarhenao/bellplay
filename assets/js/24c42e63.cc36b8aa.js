"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[6402],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},45141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"reference/buffer-analysis/temporalcentroid","title":"temporalcentroid","description":"temporalcentroid","source":"@site/docs/reference/buffer-analysis/temporalcentroid.md","sourceDirName":"reference/buffer-analysis","slug":"/reference/buffer-analysis/temporalcentroid","permalink":"/docs/reference/buffer-analysis/temporalcentroid","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyze","permalink":"/docs/tags/analyze"},{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"}],"version":"current","frontMatter":{"hide_title":true,"tags":["analyze","inspect"]},"sidebar":"tutorialSidebar","previous":{"title":"strongpeak","permalink":"/docs/reference/buffer-analysis/strongpeak"},"next":{"title":"temporalflatness","permalink":"/docs/reference/buffer-analysis/temporalflatness"}}');var s=t(74848),i=t(28453);const a={hide_title:!0,tags:["analyze","inspect"]},l=void 0,o={},c=[{value:"<code>temporalcentroid</code>",id:"temporalcentroid",level:2},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"temporalcentroid",children:(0,s.jsx)(n.code,{children:"temporalcentroid"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",children:"temporalcentroid() -> llll\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generates an audio descriptor to calculate the temporal centroid of a buffer, defined as the point in time that is a temporal balancing point of the sound's energy."}),"\n",(0,s.jsx)(n.p,{children:"The resulting buffer will be updated with the following keys:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"temporalcentroid"})}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"temporalcentroid"})," is a mirror implementation of the same algorithm in the ",(0,s.jsx)(n.a,{href:"https://essentia.upf.edu/",children:"Essentia"})," library.\nFor more details on the algorithm, please check the ",(0,s.jsx)(n.a,{href:"https://essentia.upf.edu/algorithms_reference.html",children:"Essentia Algorithms reference"}),"."]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["temporalcentroid descriptor [",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"temporalcentroid"})," is meant to be used with the ",(0,s.jsx)(n.code,{children:"analyze"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$descr = temporalcentroid(); ## generate temporalcentroid audio descriptor\n$buffer.inspect('before analysis');\n$buffer = $buffer.analyze($descr); ## apply analysis\n$buffer.inspect('after analysis')\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);