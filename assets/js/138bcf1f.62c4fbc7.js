"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[8355],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},34817:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"learning/tutorials/bufferinspector","title":"14. Inspecting Buffers","description":"An essential part of writing code is being able to debug unwanted or unexpected behaviors.","source":"@site/docs/learning/tutorials/bufferinspector.md","sourceDirName":"learning/tutorials","slug":"/learning/tutorials/bufferinspector","permalink":"/docs/learning/tutorials/bufferinspector","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"cycle","permalink":"/docs/tags/cycle"},{"inline":true,"label":"envelope","permalink":"/docs/tags/envelope"},{"inline":true,"label":"getkey","permalink":"/docs/tags/getkey"},{"inline":true,"label":"importaudio","permalink":"/docs/tags/importaudio"},{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"multiply","permalink":"/docs/tags/multiply"},{"inline":true,"label":"plus","permalink":"/docs/tags/plus"},{"inline":true,"label":"process","permalink":"/docs/tags/process"},{"inline":true,"label":"render","permalink":"/docs/tags/render"},{"inline":true,"label":"transcribe","permalink":"/docs/tags/transcribe"}],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13,"title":"14. Inspecting Buffers","tags":["cycle","envelope","getkey","importaudio","inspect","multiply","plus","process","render","transcribe"]},"sidebar":"tutorialSidebar","previous":{"title":"13. Buffer-based Parameters","permalink":"/docs/learning/tutorials/audiocontrol"},"next":{"title":"15. Audio Descriptors","permalink":"/docs/learning/tutorials/analysis"}}');var r=t(74848),s=t(28453);const o={sidebar_position:13,title:"14. Inspecting Buffers",tags:["cycle","envelope","getkey","importaudio","inspect","multiply","plus","process","render","transcribe"]},l="Inspecting Buffers",a={},c=[];function u(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inspecting-buffers",children:"Inspecting Buffers"})}),"\n",(0,r.jsxs)(n.p,{children:["An essential part of writing code is being able to debug unwanted or unexpected behaviors.\nThis is particularly necessary when dealing with audio data \u2014 i.e., buffers.\nIn ",(0,r.jsx)(n.strong,{children:"bellplay~"}),", we can use the ",(0,r.jsx)(n.code,{children:"inspect"})," function to check the contents of any buffer we create.\nThis function opens a pop-up window displaying useful information about the inspected buffers, once the code finished evaluation."]}),"\n",(0,r.jsx)(n.p,{children:"This tutorial shows a simple example where every buffer that is not rendered can still be visualized through the buffer inspector."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",metastring:'title="inspecting_buffers.bell" showLineNumbers',children:"## import audio sample\n$buff = importaudio('trumpet.wav');\n## queue original sample for inspection\ninspect($buff @label 'pre-processing buffer');\n## create envelope buffer, based on audio file duration\n$env = envelope(\n    [0 4 0] [1 100 0.25] @duration $buff.getkey('duration') \n);\n## queue envelope for inspection (label is optional)\ninspect($env, @label 'frequency envelope');\n## create oscillator using envelope as frequency\n$osc = cycle($env).process(plus(1));\n## queue oscillator for inspection\ninspect($osc @label 'frequency oscillator');\n## process and transcribe buffer\n$buff.process(\n    ## use oscillator for amplitude modulation\n    multiply($osc) \n).transcribe();\n## trigger rendering\nrender(@play 1)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);