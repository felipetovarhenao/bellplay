"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[7545],{6043:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"reference/buffer-operations/panning","title":"panning","description":"panning","source":"@site/docs/reference/buffer-operations/panning.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/panning","permalink":"/docs/reference/buffer-operations/panning","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"overdrive","permalink":"/docs/reference/buffer-operations/overdrive"},"next":{"title":"paulfreeze","permalink":"/docs/reference/buffer-operations/paulfreeze"}}');var r=s(4848),l=s(8453);const c={hide_title:!0},d=void 0,o={},t=[{value:"<code>panning</code>",id:"panning",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"panning",children:(0,r.jsx)(n.code,{children:"panning"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",children:"panning(\n    @position 0.5\n    @numchannels 2\n    @panmode 0\n    @panlaw 1\n    @rangetype 1\n    @range 0 1\n    @compensate 1\n    @spread 1\n    @envtimeunit 2\n) -> llll\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Audio process operation for applying 1-D panning to a buffer. See ",(0,r.jsx)(n.code,{children:"process"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@position"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float/list/llll"})}),"]: panning position, as either a single number, envelope, or buffer. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0.5"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@numchannels"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: number of output channels. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"2"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@panmode"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: panning mode. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": linear"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": circular"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@panlaw"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: panning law. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": nearest neighbor"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": cosine"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rangetype"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: panning range type. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": custom"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": 0 to 1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": -1 to 1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": loudspeaker number \u2014 0-based"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": loudspeaker number \u2014 1-based"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@range"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"list"})}),"]: panning range, as a ",(0,r.jsx)(n.code,{children:"<min>"})," ",(0,r.jsx)(n.code,{children:"<max>"})," value pair. Ignored unless ",(0,r.jsx)(n.code,{children:"@rangetype"})," is ",(0,r.jsx)(n.code,{children:"0"})," (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"0 1"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@compensate"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: Reduce gain for multichannel files by a factor of the number of channels. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@spread"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int/float"})}),"]: multichannel panning spread, between 0 and 1. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"1"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@envtimeunit"})," [",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"int"})}),"]: time unit for ",(0,r.jsx)(n.code,{children:"@gain"})," envelope. (",(0,r.jsx)(n.em,{children:"default"}),": ",(0,r.jsx)(n.code,{children:"2"}),").","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": milliseconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": samples"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"2"}),": duration ratio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"3"}),": milliseconds difference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"4"}),": samples difference"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(n.p,{children:["panning operation [",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"panning"})," is meant to be used with the ",(0,r.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = panning(); ## processing operation\n$buffer.inspect('before process');\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after process')\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);