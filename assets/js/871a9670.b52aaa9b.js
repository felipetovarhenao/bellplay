"use strict";(self.webpackChunkbellplay_docs=self.webpackChunkbellplay_docs||[]).push([[6818],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var s=r(96540);const i={},l=s.createContext(i);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:n},e.children)}},91921:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"reference/buffer-operations/normalize","title":"normalize","description":"normalize","source":"@site/docs/reference/buffer-operations/normalize.md","sourceDirName":"reference/buffer-operations","slug":"/reference/buffer-operations/normalize","permalink":"/docs/reference/buffer-operations/normalize","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"inspect","permalink":"/docs/tags/inspect"},{"inline":true,"label":"process","permalink":"/docs/tags/process"}],"version":"current","frontMatter":{"hide_title":true,"tags":["inspect","process"]},"sidebar":"tutorialSidebar","previous":{"title":"multiply","permalink":"/docs/reference/buffer-operations/multiply"},"next":{"title":"onepole","permalink":"/docs/reference/buffer-operations/onepole"}}');var i=r(74848),l=r(28453);const o={hide_title:!0,tags:["inspect","process"]},t=void 0,c={},d=[{value:"<code>normalize</code>",id:"normalize",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Output",id:"output",level:3},{value:"Usage",id:"usage",level:3}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"normalize",children:(0,i.jsx)(n.code,{children:"normalize"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",children:"normalize(\n    @level -6\n    @mix 1\n    @rms 0\n    @ampunit 1\n) -> llll\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generates an audio process operation for normalizing the amplitude of a buffer."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@level"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int/float"})}),"]: reference level. (",(0,i.jsx)(n.em,{children:"default"}),": ",(0,i.jsx)(n.code,{children:"-6"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@mix"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: dry/wet mix, between 0 and 1. (",(0,i.jsx)(n.em,{children:"default"}),": ",(0,i.jsx)(n.code,{children:"1"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@rms"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: use root mean square. (",(0,i.jsx)(n.em,{children:"default"}),": ",(0,i.jsx)(n.code,{children:"0"}),").","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": off"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": on"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@ampunit"})," [",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"int"})}),"]: amplitude unit for ",(0,i.jsx)(n.code,{children:"@level"}),". (",(0,i.jsx)(n.em,{children:"default"}),": ",(0,i.jsx)(n.code,{children:"1"}),").","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0"}),": linear"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": decibels"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,i.jsxs)(n.p,{children:["normalize operation [",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"llll"})}),"]"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"normalize"})," is meant to be used with the ",(0,i.jsx)(n.code,{children:"process"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bell",metastring:"showLineNumbers",children:"$buffer = importaudio('singing.wav'); ## input buffer\n$op = normalize(); ## processing operation\n$buffer = $buffer.process($op); ## apply processing\n$buffer.inspect('after normalize process')\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);